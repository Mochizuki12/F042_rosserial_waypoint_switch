
F042_rosserial_waypoint_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005e74  08005e74  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e74  08005e74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  20000074  08005ef4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08005ef4  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c2a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a68  00000000  00000000  00035cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00038730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000396a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a112  00000000  00000000  0003a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001176a  00000000  00000000  00054652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992b9  00000000  00000000  00065dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  000ff0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b54 	.word	0x08005b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08005b54 	.word	0x08005b54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	490d      	ldr	r1, [pc, #52]	; (8000274 <_ZN3ros16normalizeSecNSecERmS0_+0x44>)
 8000240:	0018      	movs	r0, r3
 8000242:	f7ff ffef 	bl	8000224 <__aeabi_uidivmod>
 8000246:	000b      	movs	r3, r1
 8000248:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4909      	ldr	r1, [pc, #36]	; (8000274 <_ZN3ros16normalizeSecNSecERmS0_+0x44>)
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ff61 	bl	8000118 <__udivsi3>
 8000256:	0003      	movs	r3, r0
 8000258:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	18d2      	adds	r2, r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b004      	add	sp, #16
 8000272:	bd80      	pop	{r7, pc}
 8000274:	3b9aca00 	.word	0x3b9aca00

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f002 fbfa 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f80d 	bl	800029e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f8f8 	bl	8000478 <MX_GPIO_Init>
  MX_DMA_Init();
 8000288:	f000 f8d8 	bl	800043c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800028c:	f000 f8a6 	bl	80003dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000290:	f000 f850 	bl	8000334 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000294:	f001 faee 	bl	8001874 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000298:	f001 fb00 	bl	800189c <loop>
 800029c:	e7fc      	b.n	8000298 <main+0x20>

0800029e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029e:	b590      	push	{r4, r7, lr}
 80002a0:	b093      	sub	sp, #76	; 0x4c
 80002a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a4:	2414      	movs	r4, #20
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	0018      	movs	r0, r3
 80002aa:	2334      	movs	r3, #52	; 0x34
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f005 fab5 	bl	800581e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f005 faae 	bl	800581e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	0021      	movs	r1, r4
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2201      	movs	r2, #1
 80002ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2210      	movs	r2, #16
 80002d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0212      	lsls	r2, r2, #8
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	0312      	lsls	r2, r2, #12
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f003 f8bf 	bl	8003478 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002fe:	f000 f907 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2202      	movs	r2, #2
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f003 fc30 	bl	8003b84 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000328:	f000 f8f2 	bl	8000510 <Error_Handler>
  }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b013      	add	sp, #76	; 0x4c
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	2308      	movs	r3, #8
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2310      	movs	r3, #16
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f005 fa6a 	bl	800581e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	2308      	movs	r3, #8
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f005 fa63 	bl	800581e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	05d2      	lsls	r2, r2, #23
 800035e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800036e:	2201      	movs	r2, #1
 8000370:	4252      	negs	r2, r2
 8000372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000382:	0018      	movs	r0, r3
 8000384:	f003 fd6a 	bl	8003e5c <HAL_TIM_Base_Init>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f8c0 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000390:	2108      	movs	r1, #8
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0152      	lsls	r2, r2, #5
 8000398:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039a:	187a      	adds	r2, r7, r1
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f003 fdab 	bl	8003efc <HAL_TIM_ConfigClockSource>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80003aa:	f000 f8b1 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ba:	003a      	movs	r2, r7
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_TIM2_Init+0xa4>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f003 ff7f 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003ca:	f000 f8a1 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b006      	add	sp, #24
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	20000090 	.word	0x20000090

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <MX_USART2_UART_Init+0x5c>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003e8:	22e1      	movs	r2, #225	; 0xe1
 80003ea:	0212      	lsls	r2, r2, #8
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000420:	0018      	movs	r0, r3
 8000422:	f003 ffa7 	bl	8004374 <HAL_UART_Init>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042a:	f000 f871 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200000d8 	.word	0x200000d8
 8000438:	40004400 	.word	0x40004400

0800043c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_DMA_Init+0x38>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_DMA_Init+0x38>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	200b      	movs	r0, #11
 8000460:	f002 fc3c 	bl	8002cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000464:	200b      	movs	r0, #11
 8000466:	f002 fc4e 	bl	8002d06 <HAL_NVIC_EnableIRQ>

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b089      	sub	sp, #36	; 0x24
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	240c      	movs	r4, #12
 8000480:	193b      	adds	r3, r7, r4
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f005 f9c8 	bl	800581e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_GPIO_Init+0x90>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_GPIO_Init+0x90>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	03c9      	lsls	r1, r1, #15
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_GPIO_Init+0x90>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	03db      	lsls	r3, r3, #15
 80004a4:	4013      	ands	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_GPIO_Init+0x90>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_GPIO_Init+0x90>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0289      	lsls	r1, r1, #10
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_GPIO_Init+0x90>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	029b      	lsls	r3, r3, #10
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_GPIO_Init+0x90>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_GPIO_Init+0x90>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	02c9      	lsls	r1, r1, #11
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_GPIO_Init+0x90>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	02db      	lsls	r3, r3, #11
 80004dc:	4013      	ands	r3, r2
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2208      	movs	r2, #8
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2202      	movs	r2, #2
 80004f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <MX_GPIO_Init+0x94>)
 80004f8:	0019      	movs	r1, r3
 80004fa:	0010      	movs	r0, r2
 80004fc:	f002 fe36 	bl	800316c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b009      	add	sp, #36	; 0x24
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>

0800051a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}

08000538 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <_ZN3ros3MsgC1Ev+0x18>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	08005e2c 	.word	0x08005e2c

08000554 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
      data()
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ffea 	bl	8000538 <_ZN3ros3MsgC1Ev>
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3304      	adds	r3, #4
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff ffd3 	bl	800051a <_ZN3ros4TimeC1Ev>
    {
    }
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0018      	movs	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	08005e14 	.word	0x08005e14

08000584 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	b2ca      	uxtb	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	0a19      	lsrs	r1, r3, #8
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	0c19      	lsrs	r1, r3, #16
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3302      	adds	r3, #2
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	18d3      	adds	r3, r2, r3
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	0e19      	lsrs	r1, r3, #24
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3303      	adds	r3, #3
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3304      	adds	r3, #4
 80005da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6899      	ldr	r1, [r3, #8]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	18d3      	adds	r3, r2, r3
 80005e6:	b2ca      	uxtb	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	0a19      	lsrs	r1, r3, #8
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	18d3      	adds	r3, r2, r3
 80005f8:	b2ca      	uxtb	r2, r1
 80005fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	0c19      	lsrs	r1, r3, #16
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3302      	adds	r3, #2
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	b2ca      	uxtb	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	0e19      	lsrs	r1, r3, #24
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3303      	adds	r3, #3
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	18d3      	adds	r3, r2, r3
 800061c:	b2ca      	uxtb	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3304      	adds	r3, #4
 8000624:	60fb      	str	r3, [r7, #12]
      return offset;
 8000626:	68fb      	ldr	r3, [r7, #12]
    }
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}

08000630 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	001a      	movs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	6839      	ldr	r1, [r7, #0]
 8000656:	18cb      	adds	r3, r1, r3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3302      	adds	r3, #2
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	18cb      	adds	r3, r1, r3
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3303      	adds	r3, #3
 8000680:	6839      	ldr	r1, [r7, #0]
 8000682:	18cb      	adds	r3, r1, r3
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	061b      	lsls	r3, r3, #24
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3304      	adds	r3, #4
 8000692:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	001a      	movs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3301      	adds	r3, #1
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	18cb      	adds	r3, r1, r3
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3302      	adds	r3, #2
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	18cb      	adds	r3, r1, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3303      	adds	r3, #3
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	18cb      	adds	r3, r1, r3
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	061b      	lsls	r3, r3, #24
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3304      	adds	r3, #4
 80006e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80006ea:	68fb      	ldr	r3, [r7, #12]
    }
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	08005b6c 	.word	0x08005b6c

0800070c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	08005b7c 	.word	0x08005b7c

08000724 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ff02 	bl	8000538 <_ZN3ros3MsgC1Ev>
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	809a      	strh	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
    {
    }
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	08005dfc 	.word	0x08005dfc
 8000768:	08005ba0 	.word	0x08005ba0

0800076c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	8899      	ldrh	r1, [r3, #4]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	18d3      	adds	r3, r2, r3
 8000784:	b2ca      	uxtb	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	889b      	ldrh	r3, [r3, #4]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b299      	uxth	r1, r3
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3301      	adds	r3, #1
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	18d3      	adds	r3, r2, r3
 8000798:	b2ca      	uxtb	r2, r1
 800079a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	3302      	adds	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fcae 	bl	8000108 <strlen>
 80007ac:	0003      	movs	r3, r0
 80007ae:	61bb      	str	r3, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 f8c4 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3304      	adds	r3, #4
 80007c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d0      	adds	r0, r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	0019      	movs	r1, r3
 80007d4:	f005 f81a 	bl	800580c <memcpy>
      offset += length_topic_name;
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	18d3      	adds	r3, r2, r3
 80007de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fc8f 	bl	8000108 <strlen>
 80007ea:	0003      	movs	r3, r0
 80007ec:	617b      	str	r3, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	18d3      	adds	r3, r2, r3
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 f8a5 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	18d0      	adds	r0, r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	0019      	movs	r1, r3
 8000812:	f004 fffb 	bl	800580c <memcpy>
      offset += length_message_type;
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fc70 	bl	8000108 <strlen>
 8000828:	0003      	movs	r3, r0
 800082a:	613b      	str	r3, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f001 f886 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3304      	adds	r3, #4
 8000840:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	18d0      	adds	r0, r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	0019      	movs	r1, r3
 8000850:	f004 ffdc 	bl	800580c <memcpy>
      offset += length_md5sum;
 8000854:	69fa      	ldr	r2, [r7, #28]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000862:	68f9      	ldr	r1, [r7, #12]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	0a19      	lsrs	r1, r3, #8
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	b2ca      	uxtb	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	0c19      	lsrs	r1, r3, #16
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3302      	adds	r3, #2
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	b2ca      	uxtb	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	0e19      	lsrs	r1, r3, #24
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3303      	adds	r3, #3
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
      return offset;
 80008a4:	69fb      	ldr	r3, [r7, #28]
    }
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b008      	add	sp, #32
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b08a      	sub	sp, #40	; 0x28
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	18d3      	adds	r3, r2, r3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	889b      	ldrh	r3, [r3, #4]
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	3301      	adds	r3, #1
 80008d4:	6839      	ldr	r1, [r7, #0]
 80008d6:	18cb      	adds	r3, r1, r3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3302      	adds	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	2314      	movs	r3, #20
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 f840 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	3304      	adds	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	18d3      	adds	r3, r2, r3
 8000910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000912:	429a      	cmp	r2, r3
 8000914:	d20c      	bcs.n	8000930 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	18d2      	adds	r2, r2, r3
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	3b01      	subs	r3, #1
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	18cb      	adds	r3, r1, r3
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3301      	adds	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	e7ec      	b.n	800090a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	3b01      	subs	r3, #1
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	18d3      	adds	r3, r2, r3
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3b01      	subs	r3, #1
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	18d2      	adds	r2, r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	18d2      	adds	r2, r2, r3
 800095a:	2310      	movs	r3, #16
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f80d 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	3304      	adds	r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	18d3      	adds	r3, r2, r3
 8000976:	6a3a      	ldr	r2, [r7, #32]
 8000978:	429a      	cmp	r2, r3
 800097a:	d20c      	bcs.n	8000996 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	18d2      	adds	r2, r2, r3
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	3b01      	subs	r3, #1
 8000986:	6839      	ldr	r1, [r7, #0]
 8000988:	18cb      	adds	r3, r1, r3
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	3301      	adds	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	e7ec      	b.n	8000970 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	3b01      	subs	r3, #1
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	18d2      	adds	r2, r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	18d2      	adds	r2, r2, r3
 80009c0:	230c      	movs	r3, #12
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 ffda 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	3304      	adds	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d20c      	bcs.n	80009fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	18d2      	adds	r2, r2, r3
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	18cb      	adds	r3, r1, r3
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	3301      	adds	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e7ec      	b.n	80009d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	3b01      	subs	r3, #1
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	18d3      	adds	r3, r2, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	18d2      	adds	r2, r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	18d3      	adds	r3, r2, r3
 8000a1e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	188a      	adds	r2, r1, r2
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3301      	adds	r3, #1
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	18cb      	adds	r3, r1, r3
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	18cb      	adds	r3, r1, r3
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	3303      	adds	r3, #3
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	18cb      	adds	r3, r1, r3
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	061b      	lsls	r3, r3, #24
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	3304      	adds	r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a74:	69bb      	ldr	r3, [r7, #24]
    }
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00a      	add	sp, #40	; 0x28
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	08005ba4 	.word	0x08005ba4

08000a98 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	08005bc0 	.word	0x08005bc0

08000ab0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fd3c 	bl	8000538 <_ZN3ros3MsgC1Ev>
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	711a      	strb	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000ad0:	609a      	str	r2, [r3, #8]
    {
    }
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	08005de4 	.word	0x08005de4
 8000ae0:	08005ba0 	.word	0x08005ba0

08000ae4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	18d3      	adds	r3, r2, r3
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7912      	ldrb	r2, [r2, #4]
 8000afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fafd 	bl	8000108 <strlen>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	60bb      	str	r3, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	18d3      	adds	r3, r2, r3
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 ff13 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3304      	adds	r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	18d0      	adds	r0, r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	0019      	movs	r1, r3
 8000b36:	f004 fe69 	bl	800580c <memcpy>
      offset += length_msg;
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b42:	68fb      	ldr	r3, [r7, #12]
    }
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b004      	add	sp, #16
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	18d2      	adds	r2, r2, r3
 8000b72:	230c      	movs	r3, #12
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 ff01 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	3304      	adds	r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d20c      	bcs.n	8000bae <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	18d2      	adds	r2, r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	18cb      	adds	r3, r1, r3
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e7ec      	b.n	8000b88 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	18d3      	adds	r3, r2, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	18d3      	adds	r3, r2, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	18d2      	adds	r2, r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	18d3      	adds	r3, r2, r3
 8000bd0:	613b      	str	r3, [r7, #16]
     return offset;
 8000bd2:	693b      	ldr	r3, [r7, #16]
    }
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	08005be4 	.word	0x08005be4

08000bf4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	08005bf8 	.word	0x08005bf8

08000c0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fc8e 	bl	8000538 <_ZN3ros3MsgC1Ev>
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	08005dcc 	.word	0x08005dcc

08000c68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6859      	ldr	r1, [r3, #4]
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	b2ca      	uxtb	r2, r1
 8000c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	0a19      	lsrs	r1, r3, #8
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	0c19      	lsrs	r1, r3, #16
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	b2ca      	uxtb	r2, r1
 8000ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	0e19      	lsrs	r1, r3, #24
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	3303      	adds	r3, #3
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	18d3      	adds	r3, r2, r3
 8000cb6:	b2ca      	uxtb	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d22b      	bcs.n	8000d26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	18d3      	adds	r3, r2, r3
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000cdc:	6939      	ldr	r1, [r7, #16]
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	18d3      	adds	r3, r2, r3
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	0a19      	lsrs	r1, r3, #8
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	3301      	adds	r3, #1
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	0c19      	lsrs	r1, r3, #16
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	3302      	adds	r3, #2
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	b2ca      	uxtb	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	0e19      	lsrs	r1, r3, #24
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	3303      	adds	r3, #3
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	b2ca      	uxtb	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	3301      	adds	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e7ce      	b.n	8000cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6919      	ldr	r1, [r3, #16]
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	b2ca      	uxtb	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	0a19      	lsrs	r1, r3, #8
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	0c19      	lsrs	r1, r3, #16
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	3302      	adds	r3, #2
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	b2ca      	uxtb	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	0e19      	lsrs	r1, r3, #24
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3303      	adds	r3, #3
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d22b      	bcs.n	8000dd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	18d3      	adds	r3, r2, r3
 8000d94:	b2ca      	uxtb	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	0a19      	lsrs	r1, r3, #8
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	3301      	adds	r3, #1
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	0c19      	lsrs	r1, r3, #16
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	3302      	adds	r3, #2
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	0e19      	lsrs	r1, r3, #24
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3303      	adds	r3, #3
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	3304      	adds	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	e7ce      	b.n	8000d74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69d9      	ldr	r1, [r3, #28]
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	b2ca      	uxtb	r2, r1
 8000de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	0a19      	lsrs	r1, r3, #8
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	0c19      	lsrs	r1, r3, #16
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	3302      	adds	r3, #2
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	18d3      	adds	r3, r2, r3
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	0e19      	lsrs	r1, r3, #24
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3303      	adds	r3, #3
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	b2ca      	uxtb	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d22a      	bcs.n	8000e84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x21c>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	18d3      	adds	r3, r2, r3
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f964 	bl	8000108 <strlen>
 8000e40:	0003      	movs	r3, r0
 8000e42:	617b      	str	r3, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	18d3      	adds	r3, r2, r3
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 fd7a 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	3304      	adds	r3, #4
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	18d0      	adds	r0, r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	0019      	movs	r1, r3
 8000e70:	f004 fccc 	bl	800580c <memcpy>
      offset += length_stringsi;
 8000e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	18d3      	adds	r3, r2, r3
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	e7cf      	b.n	8000e24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b00a      	add	sp, #40	; 0x28
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b08e      	sub	sp, #56	; 0x38
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	6a3a      	ldr	r2, [r7, #32]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eba:	3302      	adds	r3, #2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ecc:	3303      	adds	r3, #3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	6a3a      	ldr	r2, [r7, #32]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ede:	3304      	adds	r3, #4
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d90a      	bls.n	8000f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f004 fc9a 	bl	8005830 <realloc>
 8000efc:	0002      	movs	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a3a      	ldr	r2, [r7, #32]
 8000f06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d238      	bcs.n	8000f88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfa>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	188a      	adds	r2, r1, r2
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	18cb      	adds	r3, r1, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	4313      	orrs	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3e:	3302      	adds	r3, #2
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	18cb      	adds	r3, r1, r3
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3303      	adds	r3, #3
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	18cb      	adds	r3, r1, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	061b      	lsls	r3, r3, #24
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f66:	3304      	adds	r3, #4
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	18d0      	adds	r0, r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3308      	adds	r3, #8
 8000f78:	2204      	movs	r2, #4
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	f004 fc46 	bl	800580c <memcpy>
      for( uint32_t i = 0; i < ints_length; i++){
 8000f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f82:	3301      	adds	r3, #1
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
 8000f86:	e7c1      	b.n	8000f0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	3301      	adds	r3, #1
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	18d3      	adds	r3, r2, r3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	3303      	adds	r3, #3
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	3304      	adds	r3, #4
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d90a      	bls.n	8000fee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x160>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699a      	ldr	r2, [r3, #24]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	f004 fc24 	bl	8005830 <realloc>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d238      	bcs.n	8001074 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e6>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	188a      	adds	r2, r1, r2
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001018:	3301      	adds	r3, #1
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	18cb      	adds	r3, r1, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102a:	3302      	adds	r3, #2
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	18cb      	adds	r3, r1, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103c:	3303      	adds	r3, #3
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	18cb      	adds	r3, r1, r3
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	061b      	lsls	r3, r3, #24
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	3304      	adds	r3, #4
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	18d0      	adds	r0, r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3314      	adds	r3, #20
 8001064:	2204      	movs	r2, #4
 8001066:	0019      	movs	r1, r3
 8001068:	f004 fbd0 	bl	800580c <memcpy>
      for( uint32_t i = 0; i < floats_length; i++){
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	3301      	adds	r3, #1
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001072:	e7c1      	b.n	8000ff8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x16a>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001080:	3301      	adds	r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	3302      	adds	r3, #2
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a4:	3303      	adds	r3, #3
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	3304      	adds	r3, #4
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d90a      	bls.n	80010da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	0019      	movs	r1, r3
 80010ce:	0010      	movs	r0, r2
 80010d0:	f004 fbae 	bl	8005830 <realloc>
 80010d4:	0002      	movs	r2, r0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d241      	bcs.n	8001172 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2e4>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	18d2      	adds	r2, r2, r3
 80010f4:	230c      	movs	r3, #12
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fc40 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	3304      	adds	r3, #4
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	18d3      	adds	r3, r2, r3
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	429a      	cmp	r2, r3
 8001114:	d20c      	bcs.n	8001130 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2a2>
          inbuffer[k-1]=inbuffer[k];
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	18d2      	adds	r2, r2, r3
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	3b01      	subs	r3, #1
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	18cb      	adds	r3, r1, r3
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3301      	adds	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e7ec      	b.n	800110a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x27c>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3b01      	subs	r3, #1
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	3b01      	subs	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	18d2      	adds	r2, r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800114c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	18d0      	adds	r0, r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3320      	adds	r3, #32
 8001162:	2204      	movs	r2, #4
 8001164:	0019      	movs	r1, r3
 8001166:	f004 fb51 	bl	800580c <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	3301      	adds	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	e7b8      	b.n	80010e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x256>
      }
     return offset;
 8001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b00e      	add	sp, #56	; 0x38
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	08005d08 	.word	0x08005d08

08001194 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	08005c1c 	.word	0x08005c1c

080011ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68d8      	ldr	r0, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	47a0      	blx	r4
 80011f6:	0003      	movs	r3, r0
  };
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
  }
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	0ddb      	lsrs	r3, r3, #23
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <_ZN13STM32HardwareC1Ev+0x34>)
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	2381      	movs	r3, #129	; 0x81
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	2100      	movs	r1, #0
 800124e:	50d1      	str	r1, [r2, r3]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	2381      	movs	r3, #129	; 0x81
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	2100      	movs	r1, #0
 8001258:	50d1      	str	r1, [r2, r3]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <_ZN13STM32HardwareC1Ev+0x38>)
 800125e:	2100      	movs	r1, #0
 8001260:	5099      	str	r1, [r3, r2]
    }
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000d8 	.word	0x200000d8
 8001270:	0000040c 	.word	0x0000040c

08001274 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0018      	movs	r0, r3
 8001280:	f000 f804 	bl	800128c <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3304      	adds	r3, #4
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	0019      	movs	r1, r3
 80012a2:	f003 f94b 	bl	800453c <HAL_UART_Receive_DMA>
    }
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZN13STM32Hardware4readEv>:

    int read(){
 80012ae:	b590      	push	{r4, r7, lr}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	425b      	negs	r3, r3
 80012ba:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	2381      	movs	r3, #129	; 0x81
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	58d4      	ldr	r4, [r2, r3]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff ffa4 	bl	8001214 <_ZN13STM32Hardware10getRdmaIndEv>
 80012cc:	0003      	movs	r3, r0
 80012ce:	1ae3      	subs	r3, r4, r3
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	4193      	sbcs	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	2381      	movs	r3, #129	; 0x81
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	58d3      	ldr	r3, [r2, r3]
 80012e2:	1c58      	adds	r0, r3, #1
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	2281      	movs	r2, #129	; 0x81
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	5088      	str	r0, [r1, r2]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	2381      	movs	r3, #129	; 0x81
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	58d3      	ldr	r3, [r2, r3]
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	0dd9      	lsrs	r1, r3, #23
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	2381      	movs	r3, #129	; 0x81
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	50d1      	str	r1, [r2, r3]
      }
      return c;
 8001308:	68fb      	ldr	r3, [r7, #12]
    }
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b005      	add	sp, #20
 8001310:	bd90      	pop	{r4, r7, pc}
	...

08001314 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001322:	2b20      	cmp	r3, #32
 8001324:	d108      	bne.n	8001338 <_ZN13STM32Hardware5flushEv+0x24>
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <_ZN13STM32Hardware5flushEv+0x104>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	4053      	eors	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZN13STM32Hardware5flushEv+0x24>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <_ZN13STM32Hardware5flushEv+0x26>
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d068      	beq.n	8001410 <_ZN13STM32Hardware5flushEv+0xfc>
        mutex = true;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <_ZN13STM32Hardware5flushEv+0x104>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	2381      	movs	r3, #129	; 0x81
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	58d2      	ldr	r2, [r2, r3]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 8001350:	585b      	ldr	r3, [r3, r1]
 8001352:	429a      	cmp	r2, r3
 8001354:	d059      	beq.n	800140a <_ZN13STM32Hardware5flushEv+0xf6>
          uint16_t len = 0;
 8001356:	200e      	movs	r0, #14
 8001358:	183b      	adds	r3, r7, r0
 800135a:	2200      	movs	r2, #0
 800135c:	801a      	strh	r2, [r3, #0]
		  if(tfind < twind){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a2e      	ldr	r2, [pc, #184]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 8001362:	589a      	ldr	r2, [r3, r2]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	2381      	movs	r3, #129	; 0x81
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	58cb      	ldr	r3, [r1, r3]
 800136c:	429a      	cmp	r2, r3
 800136e:	d21d      	bcs.n	80013ac <_ZN13STM32Hardware5flushEv+0x98>
			len = twind - tfind;
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	2381      	movs	r3, #129	; 0x81
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	58d3      	ldr	r3, [r2, r3]
 8001378:	b299      	uxth	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 800137e:	589b      	ldr	r3, [r3, r2]
 8001380:	b29a      	uxth	r2, r3
 8001382:	0004      	movs	r4, r0
 8001384:	183b      	adds	r3, r7, r0
 8001386:	1a8a      	subs	r2, r1, r2
 8001388:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 8001392:	589b      	ldr	r3, [r3, r2]
 8001394:	2282      	movs	r2, #130	; 0x82
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4694      	mov	ip, r2
 800139a:	4463      	add	r3, ip
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	18d1      	adds	r1, r2, r3
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	001a      	movs	r2, r3
 80013a6:	f003 f839 	bl	800441c <HAL_UART_Transmit_DMA>
 80013aa:	e027      	b.n	80013fc <_ZN13STM32Hardware5flushEv+0xe8>
		  }else{
			len = tbuflen - tfind;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 80013b0:	589b      	ldr	r3, [r3, r2]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	240e      	movs	r4, #14
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0089      	lsls	r1, r1, #2
 80013bc:	1a8a      	subs	r2, r1, r2
 80013be:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 80013c8:	589b      	ldr	r3, [r3, r2]
 80013ca:	2282      	movs	r2, #130	; 0x82
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4694      	mov	ip, r2
 80013d0:	4463      	add	r3, ip
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	18d1      	adds	r1, r2, r3
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	001a      	movs	r2, r3
 80013dc:	f003 f81e 	bl	800441c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2282      	movs	r2, #130	; 0x82
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	1899      	adds	r1, r3, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	2381      	movs	r3, #129	; 0x81
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	58d3      	ldr	r3, [r2, r3]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	001a      	movs	r2, r3
 80013f8:	f003 f810 	bl	800441c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	2381      	movs	r3, #129	; 0x81
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	58d2      	ldr	r2, [r2, r3]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4905      	ldr	r1, [pc, #20]	; (800141c <_ZN13STM32Hardware5flushEv+0x108>)
 8001408:	505a      	str	r2, [r3, r1]
        }
        mutex = false;
 800140a:	4b03      	ldr	r3, [pc, #12]	; (8001418 <_ZN13STM32Hardware5flushEv+0x104>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
      }
    }
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b005      	add	sp, #20
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	200001e8 	.word	0x200001e8
 800141c:	0000040c 	.word	0x0000040c

08001420 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
      int n = length;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4293      	cmp	r3, r2
 8001438:	dd01      	ble.n	800143e <_ZN13STM32Hardware5writeEPhi+0x1e>
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	2381      	movs	r3, #129	; 0x81
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	58d3      	ldr	r3, [r2, r3]
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4293      	cmp	r3, r2
 8001452:	d900      	bls.n	8001456 <_ZN13STM32Hardware5writeEPhi+0x36>
 8001454:	0013      	movs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	2381      	movs	r3, #129	; 0x81
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	58d3      	ldr	r3, [r2, r3]
 8001460:	2282      	movs	r2, #130	; 0x82
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	4694      	mov	ip, r2
 8001466:	4463      	add	r3, ip
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	0018      	movs	r0, r3
 8001472:	f004 f9cb 	bl	800580c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	2381      	movs	r3, #129	; 0x81
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	58d2      	ldr	r2, [r2, r3]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	0dd9      	lsrs	r1, r3, #23
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	2381      	movs	r3, #129	; 0x81
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	50d1      	str	r1, [r2, r3]

      if(n != n_tail){
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	429a      	cmp	r2, r3
 8001494:	d00c      	beq.n	80014b0 <_ZN13STM32Hardware5writeEPhi+0x90>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2282      	movs	r2, #130	; 0x82
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	1898      	adds	r0, r3, r2
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	18d1      	adds	r1, r2, r3
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	001a      	movs	r2, r3
 80014ac:	f004 f9ae 	bl	800580c <memcpy>
      }

      flush();
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff2e 	bl	8001314 <_ZN13STM32Hardware5flushEv>
    }
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b006      	add	sp, #24
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	f001 fb2e 	bl	8002b28 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <_ZN8std_srvs14TriggerRequestC1Ev>:

  class TriggerRequest : public ros::Msg
  {
    public:

    TriggerRequest()
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff f828 	bl	8000538 <_ZN3ros3MsgC1Ev>
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <_ZN8std_srvs14TriggerRequestC1Ev+0x20>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
    }
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	08005d88 	.word	0x08005d88

080014fc <_ZNK8std_srvs14TriggerRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
      return offset;
 800150a:	68fb      	ldr	r3, [r7, #12]
    }
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN8std_srvs14TriggerRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
     return offset;
 8001522:	68fb      	ldr	r3, [r7, #12]
    }
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b004      	add	sp, #16
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN8std_srvs14TriggerRequest7getTypeEv>:

    virtual const char * getType() override { return TRIGGER; };
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <_ZN8std_srvs14TriggerRequest7getTypeEv+0x14>)
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	08005d24 	.word	0x08005d24

08001544 <_ZN8std_srvs14TriggerRequest6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <_ZN8std_srvs14TriggerRequest6getMD5Ev+0x14>)
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	08005c40 	.word	0x08005c40

0800155c <_ZN8std_srvs15TriggerResponseC1Ev>:
      typedef bool _success_type;
      _success_type success;
      typedef const char* _message_type;
      _message_type message;

    TriggerResponse():
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
      success(0),
      message("")
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe ffe6 	bl	8000538 <_ZN3ros3MsgC1Ev>
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <_ZN8std_srvs15TriggerResponseC1Ev+0x2c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	711a      	strb	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <_ZN8std_srvs15TriggerResponseC1Ev+0x30>)
 800157c:	609a      	str	r2, [r3, #8]
    {
    }
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}
 8001588:	08005d70 	.word	0x08005d70
 800158c:	08005ba0 	.word	0x08005ba0

08001590 <_ZNK8std_srvs15TriggerResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.real = this->success;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	791a      	ldrb	r2, [r3, #4]
 80015a2:	210c      	movs	r1, #12
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 0) = (u_success.base >> (8 * 0)) & 0xFF;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	187a      	adds	r2, r7, r1
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->success);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
      uint32_t length_message = strlen(this->message);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7fe fda2 	bl	8000108 <strlen>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]
      varToArr(outbuffer + offset, length_message);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 f9b8 	bl	8001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3304      	adds	r3, #4
 80015dc:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->message, length_message);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d0      	adds	r0, r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	0019      	movs	r1, r3
 80015ec:	f004 f90e 	bl	800580c <memcpy>
      offset += length_message;
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
      return offset;
 80015f8:	697b      	ldr	r3, [r7, #20]
    }
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b006      	add	sp, #24
 8001600:	bd80      	pop	{r7, pc}

08001602 <_ZN8std_srvs15TriggerResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
      union {
        bool real;
        uint8_t base;
      } u_success;
      u_success.base = 0;
 8001610:	200c      	movs	r0, #12
 8001612:	183b      	adds	r3, r7, r0
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
      u_success.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001618:	183b      	adds	r3, r7, r0
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	18cb      	adds	r3, r1, r3
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4313      	orrs	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	183b      	adds	r3, r7, r0
 800162a:	701a      	strb	r2, [r3, #0]
      this->success = u_success.real;
 800162c:	183b      	adds	r3, r7, r0
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->success);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3301      	adds	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
      uint32_t length_message;
      arrToVar(length_message, (inbuffer + offset));
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	18d2      	adds	r2, r2, r3
 8001640:	2308      	movs	r3, #8
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f000 f99a 	bl	8001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	3304      	adds	r3, #4
 8001650:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_message; ++k){
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	18d3      	adds	r3, r2, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20c      	bcs.n	800167c <_ZN8std_srvs15TriggerResponse11deserializeEPh+0x7a>
          inbuffer[k-1]=inbuffer[k];
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	18d2      	adds	r2, r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3b01      	subs	r3, #1
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	18cb      	adds	r3, r1, r3
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message; ++k){
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e7ec      	b.n	8001656 <_ZN8std_srvs15TriggerResponse11deserializeEPh+0x54>
      }
      inbuffer[offset+length_message-1]=0;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	18d3      	adds	r3, r2, r3
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
      this->message = (char *)(inbuffer + offset-1);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	18d2      	adds	r2, r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]
      offset += length_message;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	613b      	str	r3, [r7, #16]
     return offset;
 80016a0:	693b      	ldr	r3, [r7, #16]
    }
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b006      	add	sp, #24
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <_ZN8std_srvs15TriggerResponse7getTypeEv>:

    virtual const char * getType() override { return TRIGGER; };
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <_ZN8std_srvs15TriggerResponse7getTypeEv+0x14>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	08005d24 	.word	0x08005d24

080016c4 <_ZN8std_srvs15TriggerResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "937c9679a518e3a18d831e57125ea522"; };
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <_ZN8std_srvs15TriggerResponse6getMD5Ev+0x14>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	08005c64 	.word	0x08005c64

080016dc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <_ZN3ros15NodeHandleBase_C1Ev+0x18>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	08005db8 	.word	0x08005db8

080016f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ffea 	bl	80016dc <_ZN3ros15NodeHandleBase_C1Ev>
 8001708:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff fd90 	bl	8001238 <_ZN13STM32HardwareC1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800171c:	2100      	movs	r1, #0
 800171e:	5099      	str	r1, [r3, r2]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	2383      	movs	r3, #131	; 0x83
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	2100      	movs	r1, #0
 8001728:	50d1      	str	r1, [r2, r3]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x100>)
 800172e:	2100      	movs	r1, #0
 8001730:	5099      	str	r1, [r3, r2]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	2384      	movs	r3, #132	; 0x84
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	2100      	movs	r1, #0
 800173a:	50d1      	str	r1, [r2, r3]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x104>)
 8001740:	189b      	adds	r3, r3, r2
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	2100      	movs	r1, #0
 8001748:	0018      	movs	r0, r3
 800174a:	f004 f868 	bl	800581e <memset>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x108>)
 8001752:	189b      	adds	r3, r3, r2
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	2100      	movs	r1, #0
 800175a:	0018      	movs	r0, r3
 800175c:	f004 f85f 	bl	800581e <memset>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x10c>)
 8001764:	189b      	adds	r3, r3, r2
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	2100      	movs	r1, #0
 800176a:	0018      	movs	r0, r3
 800176c:	f004 f857 	bl	800581e <memset>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a25      	ldr	r2, [pc, #148]	; (8001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x110>)
 8001774:	189b      	adds	r3, r3, r2
 8001776:	2264      	movs	r2, #100	; 0x64
 8001778:	2100      	movs	r1, #0
 800177a:	0018      	movs	r0, r3
 800177c:	f004 f84f 	bl	800581e <memset>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x114>)
 8001784:	2100      	movs	r1, #0
 8001786:	5099      	str	r1, [r3, r2]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	238f      	movs	r3, #143	; 0x8f
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	2100      	movs	r1, #0
 8001790:	50d1      	str	r1, [r2, r3]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x118>)
 8001796:	2100      	movs	r1, #0
 8001798:	5099      	str	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 800179e:	2100      	movs	r1, #0
 80017a0:	5099      	str	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x120>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	5099      	str	r1, [r3, r2]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	2390      	movs	r3, #144	; 0x90
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	2100      	movs	r1, #0
 80017b2:	54d1      	strb	r1, [r2, r3]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x124>)
 80017b8:	2100      	movs	r1, #0
 80017ba:	5099      	str	r1, [r3, r2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x128>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	5099      	str	r1, [r3, r2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x12c>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	5099      	str	r1, [r3, r2]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	2391      	movs	r3, #145	; 0x91
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	2100      	movs	r1, #0
 80017d4:	54d1      	strb	r1, [r2, r3]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a13      	ldr	r2, [pc, #76]	; (8001828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80017da:	4694      	mov	ip, r2
 80017dc:	4463      	add	r3, ip
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fa14 	bl	8000c0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	08005d5c 	.word	0x08005d5c
 80017f4:	00000414 	.word	0x00000414
 80017f8:	0000041c 	.word	0x0000041c
 80017fc:	00000424 	.word	0x00000424
 8001800:	00000624 	.word	0x00000624
 8001804:	00000824 	.word	0x00000824
 8001808:	00000888 	.word	0x00000888
 800180c:	000008ec 	.word	0x000008ec
 8001810:	000008f4 	.word	0x000008f4
 8001814:	000008f8 	.word	0x000008f8
 8001818:	000008fc 	.word	0x000008fc
 800181c:	00000904 	.word	0x00000904
 8001820:	00000908 	.word	0x00000908
 8001824:	0000090c 	.word	0x0000090c
 8001828:	00000914 	.word	0x00000914

0800182c <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";
*/
bool button_push_continue = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_UART_TxCpltCallback+0x20>)
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f902 	bl	8001a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800183c:	0003      	movs	r3, r0
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff fd68 	bl	8001314 <_ZN13STM32Hardware5flushEv>
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001ec 	.word	0x200001ec

08001850 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_UART_RxCpltCallback+0x20>)
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f8f0 	bl	8001a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001860:	0003      	movs	r3, r0
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff fd12 	bl	800128c <_ZN13STM32Hardware10reset_rbufEv>
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200001ec 	.word	0x200001ec

08001874 <setup>:

void setup(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  nh.initNode();
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <setup+0x20>)
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f8ea 	bl	8001a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.serviceClient(next_waypoint_client);
 8001880:	4a05      	ldr	r2, [pc, #20]	; (8001898 <setup+0x24>)
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <setup+0x20>)
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f908 	bl	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE13serviceClientIN8std_srvs14TriggerRequestENS4_15TriggerResponseEEEbRNS_13ServiceClientIT_T0_EE>

  /*//debug
  nh.advertise(chatter);
  */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	200001ec 	.word	0x200001ec
 8001898:	20000b28 	.word	0x20000b28

0800189c <loop>:

void loop(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
  std_srvs::Trigger::Request req;
 80018a2:	230c      	movs	r3, #12
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff fe16 	bl	80014d8 <_ZN8std_srvs14TriggerRequestC1Ev>
  std_srvs::Trigger::Response res;
 80018ac:	003b      	movs	r3, r7
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff fe54 	bl	800155c <_ZN8std_srvs15TriggerResponseC1Ev>

  if((HAL_GPIO_ReadPin(Button_GPIO_Port, GPIO_PIN_3) == GPIO_PIN_SET) && (button_push_continue == false)){
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <loop+0x98>)
 80018b6:	2108      	movs	r1, #8
 80018b8:	0018      	movs	r0, r3
 80018ba:	f001 fdbf 	bl	800343c <HAL_GPIO_ReadPin>
 80018be:	0003      	movs	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <loop+0x34>
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <loop+0x9c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <loop+0x34>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <loop+0x36>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d014      	beq.n	8001900 <loop+0x64>
	  next_waypoint_client.call(req, res);
 80018d6:	003a      	movs	r2, r7
 80018d8:	230c      	movs	r3, #12
 80018da:	18f9      	adds	r1, r7, r3
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <loop+0xa0>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f906 	bl	8001af0 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_>
	  if(res.success){
 80018e4:	003b      	movs	r3, r7
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <loop+0x5c>
	    nh.loginfo("call serial next SW");
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <loop+0xa4>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <loop+0xa8>)
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f94a 	bl	8001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	  }
	  button_push_continue = true;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <loop+0x9c>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e00d      	b.n	800191c <loop+0x80>
  }
  else if(HAL_GPIO_ReadPin(Button_GPIO_Port, GPIO_PIN_3) == GPIO_PIN_RESET){
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <loop+0x98>)
 8001902:	2108      	movs	r1, #8
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fd99 	bl	800343c <HAL_GPIO_ReadPin>
 800190a:	0003      	movs	r3, r0
 800190c:	425a      	negs	r2, r3
 800190e:	4153      	adcs	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <loop+0x80>
	  button_push_continue = false;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <loop+0x9c>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  }
  /*//debug
  str_msg.data = hello;
  chatter.publish(&str_msg);
  */
  nh.spinOnce();
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <loop+0xa8>)
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f944 	bl	8001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(6);
 8001924:	2006      	movs	r0, #6
 8001926:	f001 f909 	bl	8002b3c <HAL_Delay>
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	48000400 	.word	0x48000400
 8001938:	20000b60 	.word	0x20000b60
 800193c:	20000b28 	.word	0x20000b28
 8001940:	08005c88 	.word	0x08005c88
 8001944:	200001ec 	.word	0x200001ec

08001948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d80d      	bhi.n	8001978 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	40da      	lsrs	r2, r3
 8001964:	0011      	movs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e7ee      	b.n	8001956 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d811      	bhi.n	80019be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	188a      	adds	r2, r1, r2
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	0011      	movs	r1, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	00d2      	lsls	r2, r2, #3
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e7ea      	b.n	8001994 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <_ZN3ros11Subscriber_C1Ev+0x18>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08005da0 	.word	0x08005da0

080019e4 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEEC1EPKc>:

template<typename MReq , typename MRes>
class ServiceClient : public Subscriber_
{
public:
  ServiceClient(const char* topic_name) :
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    pub(topic_name, &req, rosserial_msgs::TopicInfo::ID_SERVICE_CLIENT + rosserial_msgs::TopicInfo::ID_PUBLISHER)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff ffe9 	bl	80019c8 <_ZN3ros11Subscriber_C1Ev>
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEEC1EPKc+0x58>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	330c      	adds	r3, #12
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fd69 	bl	80014d8 <_ZN8std_srvs14TriggerRequestC1Ev>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff fda6 	bl	800155c <_ZN8std_srvs15TriggerResponseC1Ev>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3324      	adds	r3, #36	; 0x24
 8001a14:	0018      	movs	r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	330c      	adds	r3, #12
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	2304      	movs	r3, #4
 8001a20:	f7ff fbc4 	bl	80011ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
  {
    this->topic_ = topic_name;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	609a      	str	r2, [r3, #8]
    this->waiting = true;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]
  }
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	08005d40 	.word	0x08005d40

08001a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
  }
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fc07 	bl	8001274 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x3c>)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5099      	str	r1, [r3, r2]
    bytes_ = 0;
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	238f      	movs	r3, #143	; 0x8f
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	2100      	movs	r1, #0
 8001a76:	50d1      	str	r1, [r2, r3]
    index_ = 0;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x40>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5099      	str	r1, [r3, r2]
    topic_ = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x44>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	5099      	str	r1, [r3, r2]
  };
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	000008ec 	.word	0x000008ec
 8001a94:	000008f8 	.word	0x000008f8
 8001a98:	000008f4 	.word	0x000008f4

08001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE13serviceClientIN8std_srvs14TriggerRequestENS4_15TriggerResponseEEEbRNS_13ServiceClientIT_T0_EE>:
    return v && w;
  }

  /* Register a new Service Client */
  template<typename MReq, typename MRes>
  bool serviceClient(ServiceClient<MReq, MRes>& srv)
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  {
    bool v = advertise(srv.pub);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3324      	adds	r3, #36	; 0x24
 8001aaa:	001a      	movs	r2, r3
 8001aac:	250f      	movs	r5, #15
 8001aae:	197c      	adds	r4, r7, r5
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 fa93 	bl	8001fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8001aba:	0003      	movs	r3, r0
 8001abc:	7023      	strb	r3, [r4, #0]
    bool w = subscribe(srv);
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	260e      	movs	r6, #14
 8001ac2:	19bc      	adds	r4, r7, r6
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fabd 	bl	8002048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	7023      	strb	r3, [r4, #0]
    return v && w;
 8001ad2:	197b      	adds	r3, r7, r5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE13serviceClientIN8std_srvs14TriggerRequestENS4_15TriggerResponseEEEbRNS_13ServiceClientIT_T0_EE+0x4a>
 8001ada:	19bb      	adds	r3, r7, r6
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE13serviceClientIN8std_srvs14TriggerRequestENS4_15TriggerResponseEEEbRNS_13ServiceClientIT_T0_EE+0x4a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE13serviceClientIN8std_srvs14TriggerRequestENS4_15TriggerResponseEEEbRNS_13ServiceClientIT_T0_EE+0x4c>
 8001ae6:	2300      	movs	r3, #0
  }
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b005      	add	sp, #20
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af0 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_>:

  virtual void call(const MReq & request, MRes & response)
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  {
    if (!pub.nh_->connected()) return;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3308      	adds	r3, #8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	4798      	blx	r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	001a      	movs	r2, r3
 8001b12:	2301      	movs	r3, #1
 8001b14:	4053      	eors	r3, r2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d131      	bne.n	8001b80 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x90>
    ret = &response;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	61da      	str	r2, [r3, #28]
    waiting = true;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
    pub.publish(&request);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3324      	adds	r3, #36	; 0x24
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff fb4f 	bl	80011d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    while (waiting && pub.nh_->connected())
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	5c9b      	ldrb	r3, [r3, r2]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x6c>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0010      	movs	r0, r2
 8001b52:	4798      	blx	r3
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x6c>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x6e>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d011      	beq.n	8001b86 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x96>
      if (pub.nh_->spinOnce() < 0) break;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0010      	movs	r0, r2
 8001b72:	4798      	blx	r3
 8001b74:	0003      	movs	r3, r0
 8001b76:	0fdb      	lsrs	r3, r3, #31
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x94>
    while (waiting && pub.nh_->connected())
 8001b7e:	e7db      	b.n	8001b38 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x48>
    if (!pub.nh_->connected()) return;
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	e000      	b.n	8001b86 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE4callERKS2_RS3_+0x96>
      if (pub.nh_->spinOnce() < 0) break;
 8001b84:	46c0      	nop			; (mov r8, r8)
  }
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 fa81 	bl	80020a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fc81 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	60fb      	str	r3, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4acf      	ldr	r2, [pc, #828]	; (8001f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x358>)
 8001bc6:	589b      	ldr	r3, [r3, r2]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4ace      	ldr	r2, [pc, #824]	; (8001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x35c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d904      	bls.n	8001bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30>
      configured_ = false;
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	2390      	movs	r3, #144	; 0x90
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	2100      	movs	r1, #0
 8001bda:	54d1      	strb	r1, [r2, r3]
    if (mode_ != MODE_FIRST_FF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4acb      	ldr	r2, [pc, #812]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001be0:	589b      	ldr	r3, [r3, r2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      if (c_time > last_msg_timeout_time)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4ac9      	ldr	r2, [pc, #804]	; (8001f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x364>)
 8001bea:	589b      	ldr	r3, [r3, r2]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d903      	bls.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
        mode_ = MODE_FIRST_FF;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4ac5      	ldr	r2, [pc, #788]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	5099      	str	r1, [r3, r2]
      if (spin_timeout_ > 0)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	2384      	movs	r3, #132	; 0x84
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	58d3      	ldr	r3, [r2, r3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d014      	beq.n	8001c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x84>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fc58 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8001c10:	0002      	movs	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	2284      	movs	r2, #132	; 0x84
 8001c1a:	00d2      	lsls	r2, r2, #3
 8001c1c:	588a      	ldr	r2, [r1, r2]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	419b      	sbcs	r3, r3
 8001c22:	425b      	negs	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x84>
          return SPIN_TIMEOUT;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	425b      	negs	r3, r3
 8001c2e:	e1c8      	b.n	8001fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x416>
      int data = hardware_.read();
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fb3a 	bl	80012ae <_ZN13STM32Hardware4readEv>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	60bb      	str	r3, [r7, #8]
      if (data < 0)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da00      	bge.n	8001c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
 8001c44:	e1a5      	b.n	8001f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e6>
      checksum_ += data;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4ab2      	ldr	r2, [pc, #712]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001c4a:	589a      	ldr	r2, [r3, r2]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	18d2      	adds	r2, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	49b0      	ldr	r1, [pc, #704]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001c54:	505a      	str	r2, [r3, r1]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4aac      	ldr	r2, [pc, #688]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001c5a:	589b      	ldr	r3, [r3, r2]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	d122      	bne.n	8001ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
        message_in[index_++] = data;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4aad      	ldr	r2, [pc, #692]	; (8001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36c>)
 8001c64:	589b      	ldr	r3, [r3, r2]
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	48ab      	ldr	r0, [pc, #684]	; (8001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36c>)
 8001c6c:	5011      	str	r1, [r2, r0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	b2d0      	uxtb	r0, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	49a9      	ldr	r1, [pc, #676]	; (8001f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>)
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	185b      	adds	r3, r3, r1
 8001c7a:	1c02      	adds	r2, r0, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	238f      	movs	r3, #143	; 0x8f
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	58d3      	ldr	r3, [r2, r3]
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	238f      	movs	r3, #143	; 0x8f
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	50d1      	str	r1, [r2, r3]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	238f      	movs	r3, #143	; 0x8f
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	58d3      	ldr	r3, [r2, r3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ae      	bne.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          mode_ = MODE_MSG_CHECKSUM;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	5099      	str	r1, [r3, r2]
 8001ca4:	e7a9      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_FIRST_FF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a98      	ldr	r2, [pc, #608]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001caa:	589b      	ldr	r3, [r3, r2]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d127      	bne.n	8001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x154>
        if (data == 0xff)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d10d      	bne.n	8001cd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x126>
          mode_++;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001cba:	589b      	ldr	r3, [r3, r2]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4992      	ldr	r1, [pc, #584]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001cc2:	505a      	str	r2, [r3, r1]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	001a      	movs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4990      	ldr	r1, [pc, #576]	; (8001f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x364>)
 8001cce:	505a      	str	r2, [r3, r1]
 8001cd0:	e793      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff fbf2 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a8f      	ldr	r2, [pc, #572]	; (8001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x374>)
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	419b      	sbcs	r3, r3
 8001ce8:	425b      	negs	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d084      	beq.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          configured_ = false;
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	2390      	movs	r3, #144	; 0x90
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	54d1      	strb	r1, [r2, r3]
          return SPIN_TIMEOUT;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	e160      	b.n	8001fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x416>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a82      	ldr	r2, [pc, #520]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d04:	589b      	ldr	r3, [r3, r2]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d11a      	bne.n	8001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x194>
        if (data == PROTOCOL_VER)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2bfe      	cmp	r3, #254	; 0xfe
 8001d0e:	d107      	bne.n	8001d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x174>
          mode_++;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d14:	589b      	ldr	r3, [r3, r2]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	497c      	ldr	r1, [pc, #496]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d1c:	505a      	str	r2, [r3, r1]
 8001d1e:	e76c      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          mode_ = MODE_FIRST_FF;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d24:	2100      	movs	r1, #0
 8001d26:	5099      	str	r1, [r3, r2]
          if (configured_ == false)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	2390      	movs	r3, #144	; 0x90
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d000      	beq.n	8001d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
 8001d34:	e761      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f9d5 	bl	80020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001d3e:	e75c      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a72      	ldr	r2, [pc, #456]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d44:	589b      	ldr	r3, [r3, r2]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d114      	bne.n	8001d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1c8>
        bytes_ = data;
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	238f      	movs	r3, #143	; 0x8f
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	50d1      	str	r1, [r2, r3]
        index_ = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a70      	ldr	r2, [pc, #448]	; (8001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36c>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5099      	str	r1, [r3, r2]
        mode_++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d60:	589b      	ldr	r3, [r3, r2]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4969      	ldr	r1, [pc, #420]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d68:	505a      	str	r2, [r3, r1]
        checksum_ = data;               /* first byte for calculating size checksum */
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4969      	ldr	r1, [pc, #420]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	505a      	str	r2, [r3, r1]
 8001d72:	e742      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a65      	ldr	r2, [pc, #404]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d78:	589b      	ldr	r3, [r3, r2]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d112      	bne.n	8001da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f8>
        bytes_ += data << 8;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	238f      	movs	r3, #143	; 0x8f
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	58d2      	ldr	r2, [r2, r3]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	18d1      	adds	r1, r2, r3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	238f      	movs	r3, #143	; 0x8f
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	50d1      	str	r1, [r2, r3]
        mode_++;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001d98:	589b      	ldr	r3, [r3, r2]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	495b      	ldr	r1, [pc, #364]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001da0:	505a      	str	r2, [r3, r1]
 8001da2:	e72a      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a59      	ldr	r2, [pc, #356]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d118      	bne.n	8001de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x234>
        if ((checksum_ % 256) == 255)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001db2:	589b      	ldr	r3, [r3, r2]
 8001db4:	4a5b      	ldr	r2, [pc, #364]	; (8001f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x378>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	d503      	bpl.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d107      	bne.n	8001dd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x22a>
          mode_++;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001dca:	589b      	ldr	r3, [r3, r2]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	494e      	ldr	r1, [pc, #312]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001dd2:	505a      	str	r2, [r3, r1]
 8001dd4:	e711      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5099      	str	r1, [r3, r2]
 8001dde:	e70c      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4a      	ldr	r2, [pc, #296]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001de4:	589b      	ldr	r3, [r3, r2]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d10f      	bne.n	8001e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x25e>
        topic_ = data;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	494f      	ldr	r1, [pc, #316]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	505a      	str	r2, [r3, r1]
        mode_++;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001df6:	589b      	ldr	r3, [r3, r2]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4943      	ldr	r1, [pc, #268]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001dfe:	505a      	str	r2, [r3, r1]
        checksum_ = data;               /* first byte included in checksum */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4944      	ldr	r1, [pc, #272]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	505a      	str	r2, [r3, r1]
 8001e08:	e6f7      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001e0e:	589b      	ldr	r3, [r3, r2]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d118      	bne.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x29a>
        topic_ += data << 8;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001e18:	589a      	ldr	r2, [r3, r2]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	18d2      	adds	r2, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4942      	ldr	r1, [pc, #264]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001e24:	505a      	str	r2, [r3, r1]
        mode_ = MODE_MESSAGE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a38      	ldr	r2, [pc, #224]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001e2a:	2107      	movs	r1, #7
 8001e2c:	5099      	str	r1, [r3, r2]
        if (bytes_ == 0)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	238f      	movs	r3, #143	; 0x8f
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	58d3      	ldr	r3, [r2, r3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d000      	beq.n	8001e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x290>
 8001e3a:	e6de      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          mode_ = MODE_MSG_CHECKSUM;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001e40:	2108      	movs	r1, #8
 8001e42:	5099      	str	r1, [r3, r2]
 8001e44:	e6d9      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001e4a:	589b      	ldr	r3, [r3, r2]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d000      	beq.n	8001e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a6>
 8001e50:	e6d3      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
        mode_ = MODE_FIRST_FF;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x360>)
 8001e56:	2100      	movs	r1, #0
 8001e58:	5099      	str	r1, [r3, r2]
        if ((checksum_ % 256) == 255)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>)
 8001e5e:	589b      	ldr	r3, [r3, r2]
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x378>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	d503      	bpl.n	8001e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c2>
 8001e66:	3b01      	subs	r3, #1
 8001e68:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d000      	beq.n	8001e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c8>
 8001e72:	e6c2      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001e78:	589b      	ldr	r3, [r3, r2]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d112      	bne.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f8>
            requestSyncTime();
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 f931 	bl	80020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f94d 	bl	8002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4927      	ldr	r1, [pc, #156]	; (8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x384>)
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	505a      	str	r2, [r3, r1]
            last_sync_receive_time = c_time;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	491a      	ldr	r1, [pc, #104]	; (8001f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x358>)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	505a      	str	r2, [r3, r1]
            return SPIN_ERR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	425b      	negs	r3, r3
 8001ea2:	e08e      	b.n	8001fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x416>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001ea8:	589b      	ldr	r3, [r3, r2]
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d108      	bne.n	8001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x314>
            syncTime(message_in);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>)
 8001eb2:	189a      	adds	r2, r3, r2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fa45 	bl	8002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ebe:	e69c      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001ec4:	589b      	ldr	r3, [r3, r2]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d110      	bne.n	8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x340>
            req_param_resp.deserialize(message_in);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x388>)
 8001ece:	189a      	adds	r2, r3, r2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4912      	ldr	r1, [pc, #72]	; (8001f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>)
 8001ed4:	468c      	mov	ip, r1
 8001ed6:	4463      	add	r3, ip
 8001ed8:	0019      	movs	r1, r3
 8001eda:	0010      	movs	r0, r2
 8001edc:	f7fe ffd7 	bl	8000e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	2391      	movs	r3, #145	; 0x91
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	54d1      	strb	r1, [r2, r3]
 8001eea:	e686      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001ef0:	589b      	ldr	r3, [r3, r2]
 8001ef2:	2b0b      	cmp	r3, #11
 8001ef4:	d120      	bne.n	8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
            configured_ = false;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	2390      	movs	r3, #144	; 0x90
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	2100      	movs	r1, #0
 8001efe:	54d1      	strb	r1, [r2, r3]
 8001f00:	e67b      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	00000908 	.word	0x00000908
 8001f08:	00002af8 	.word	0x00002af8
 8001f0c:	000008ec 	.word	0x000008ec
 8001f10:	0000090c 	.word	0x0000090c
 8001f14:	000008fc 	.word	0x000008fc
 8001f18:	000008f8 	.word	0x000008f8
 8001f1c:	00000424 	.word	0x00000424
 8001f20:	00001388 	.word	0x00001388
 8001f24:	800000ff 	.word	0x800000ff
 8001f28:	ffffff00 	.word	0xffffff00
 8001f2c:	000008f4 	.word	0x000008f4
 8001f30:	00000904 	.word	0x00000904
 8001f34:	00000914 	.word	0x00000914
            if (subscribers[topic_ - 100])
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>)
 8001f3c:	589b      	ldr	r3, [r3, r2]
 8001f3e:	3b64      	subs	r3, #100	; 0x64
 8001f40:	001a      	movs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4922      	ldr	r1, [pc, #136]	; (8001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x424>)
 8001f46:	468c      	mov	ip, r1
 8001f48:	4462      	add	r2, ip
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	58d3      	ldr	r3, [r2, r3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d100      	bne.n	8001f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001f52:	e652      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
              subscribers[topic_ - 100]->callback(message_in);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>)
 8001f58:	589b      	ldr	r3, [r3, r2]
 8001f5a:	3b64      	subs	r3, #100	; 0x64
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	491b      	ldr	r1, [pc, #108]	; (8001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x424>)
 8001f62:	468c      	mov	ip, r1
 8001f64:	4462      	add	r2, ip
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	58d0      	ldr	r0, [r2, r3]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>)
 8001f6e:	589b      	ldr	r3, [r3, r2]
 8001f70:	3b64      	subs	r3, #100	; 0x64
 8001f72:	001a      	movs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x424>)
 8001f78:	468c      	mov	ip, r1
 8001f7a:	4462      	add	r2, ip
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4913      	ldr	r1, [pc, #76]	; (8001fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x428>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	4463      	add	r3, ip
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	4790      	blx	r2
    while (true)
 8001f90:	e633      	b.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e>
        break;
 8001f92:	46c0      	nop			; (mov r8, r8)
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	2390      	movs	r3, #144	; 0x90
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00f      	beq.n	8001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x414>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x42c>)
 8001fa4:	589b      	ldr	r3, [r3, r2]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d907      	bls.n	8001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x414>
      requestSyncTime();
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f898 	bl	80020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x42c>)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	505a      	str	r2, [r3, r1]
    return SPIN_OK;
 8001fc0:	2300      	movs	r3, #0
  }
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000008f4 	.word	0x000008f4
 8001fd0:	00000222 	.word	0x00000222
 8001fd4:	00000424 	.word	0x00000424
 8001fd8:	00000904 	.word	0x00000904
 8001fdc:	000009c4 	.word	0x000009c4

08001fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b18      	cmp	r3, #24
 8001ff2:	dc24      	bgt.n	800203e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x5e>
      if (publishers[i] == 0) // empty slot
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2182      	movs	r1, #130	; 0x82
 8001ffa:	0089      	lsls	r1, r1, #2
 8001ffc:	468c      	mov	ip, r1
 8001ffe:	4463      	add	r3, ip
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	18d3      	adds	r3, r2, r3
 8002004:	3304      	adds	r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d114      	bne.n	8002036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x56>
        publishers[i] = &p;
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2182      	movs	r1, #130	; 0x82
 8002012:	0089      	lsls	r1, r1, #2
 8002014:	468c      	mov	ip, r1
 8002016:	4463      	add	r3, ip
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	18d3      	adds	r3, r2, r3
 800201c:	3304      	adds	r3, #4
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	337d      	adds	r3, #125	; 0x7d
 8002026:	001a      	movs	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	60da      	str	r2, [r3, #12]
        return true;
 8002032:	2301      	movs	r3, #1
 8002034:	e004      	b.n	8002040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x60>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e7d7      	b.n	8001fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800203e:	2300      	movs	r3, #0
  }
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b18      	cmp	r3, #24
 800205a:	dc1b      	bgt.n	8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
      if (subscribers[i] == 0) // empty slot
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	490f      	ldr	r1, [pc, #60]	; (80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x58>)
 8002062:	468c      	mov	ip, r1
 8002064:	4462      	add	r2, ip
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	58d3      	ldr	r3, [r2, r3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10e      	bne.n	800208c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
        subscribers[i] = &s;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	490b      	ldr	r1, [pc, #44]	; (80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x58>)
 8002074:	468c      	mov	ip, r1
 8002076:	4462      	add	r2, ip
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	50d1      	str	r1, [r2, r3]
        s.id_ = i + 100;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3364      	adds	r3, #100	; 0x64
 8002082:	001a      	movs	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	605a      	str	r2, [r3, #4]
        return true;
 8002088:	2301      	movs	r3, #1
 800208a:	e004      	b.n	8002096 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e7e0      	b.n	8002056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
    return false;
 8002094:	2300      	movs	r3, #0
  }
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	00000222 	.word	0x00000222

080020a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	250b      	movs	r5, #11
 80020b0:	197b      	adds	r3, r7, r5
 80020b2:	1c0a      	adds	r2, r1, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    rosserial_msgs::Log l;
 80020b6:	2414      	movs	r4, #20
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7fe fcf8 	bl	8000ab0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80020c0:	0021      	movs	r1, r4
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	197a      	adds	r2, r7, r5
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	711a      	strb	r2, [r3, #4]
    l.msg = (char*)msg;
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	187a      	adds	r2, r7, r1
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	2107      	movs	r1, #7
 80020dc:	4798      	blx	r3
  }
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b008      	add	sp, #32
 80020e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80020f0:	240c      	movs	r4, #12
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	193a      	adds	r2, r7, r4
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	210a      	movs	r1, #10
 8002106:	4798      	blx	r3
    rt_time = hardware_.time();
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff f9d7 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8002112:	0002      	movs	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4903      	ldr	r1, [pc, #12]	; (8002124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x3c>)
 8002118:	505a      	str	r2, [r3, r1]
  }
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b007      	add	sp, #28
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	00000414 	.word	0x00000414

08002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8002130:	230c      	movs	r3, #12
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe faf5 	bl	8000724 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	2b18      	cmp	r3, #24
 8002142:	dd00      	ble.n	8002146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1e>
 8002144:	e081      	b.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x122>
      if (publishers[i] != 0) // non-empty slot
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	2182      	movs	r1, #130	; 0x82
 800214c:	0089      	lsls	r1, r1, #2
 800214e:	468c      	mov	ip, r1
 8002150:	4463      	add	r3, ip
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	18d3      	adds	r3, r2, r3
 8002156:	3304      	adds	r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d071      	beq.n	8002242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x11a>
        ti.topic_id = publishers[i]->id_;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2182      	movs	r1, #130	; 0x82
 8002164:	0089      	lsls	r1, r1, #2
 8002166:	468c      	mov	ip, r1
 8002168:	4463      	add	r3, ip
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	18d3      	adds	r3, r2, r3
 800216e:	3304      	adds	r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	b29a      	uxth	r2, r3
 8002176:	240c      	movs	r4, #12
 8002178:	193b      	adds	r3, r7, r4
 800217a:	809a      	strh	r2, [r3, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2182      	movs	r1, #130	; 0x82
 8002182:	0089      	lsls	r1, r1, #2
 8002184:	468c      	mov	ip, r1
 8002186:	4463      	add	r3, ip
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	3304      	adds	r3, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	193b      	adds	r3, r7, r4
 8002194:	609a      	str	r2, [r3, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	2182      	movs	r1, #130	; 0x82
 800219c:	0089      	lsls	r1, r1, #2
 800219e:	468c      	mov	ip, r1
 80021a0:	4463      	add	r3, ip
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	2082      	movs	r0, #130	; 0x82
 80021b2:	0080      	lsls	r0, r0, #2
 80021b4:	4684      	mov	ip, r0
 80021b6:	4463      	add	r3, ip
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	3304      	adds	r3, #4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3308      	adds	r3, #8
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0008      	movs	r0, r1
 80021ca:	4798      	blx	r3
 80021cc:	0002      	movs	r2, r0
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	60da      	str	r2, [r3, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	2182      	movs	r1, #130	; 0x82
 80021d8:	0089      	lsls	r1, r1, #2
 80021da:	468c      	mov	ip, r1
 80021dc:	4463      	add	r3, ip
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	3304      	adds	r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	2082      	movs	r0, #130	; 0x82
 80021ee:	0080      	lsls	r0, r0, #2
 80021f0:	4684      	mov	ip, r0
 80021f2:	4463      	add	r3, ip
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	330c      	adds	r3, #12
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0008      	movs	r0, r1
 8002206:	4798      	blx	r3
 8002208:	0002      	movs	r2, r0
 800220a:	193b      	adds	r3, r7, r4
 800220c:	611a      	str	r2, [r3, #16]
        ti.buffer_size = OUTPUT_SIZE;
 800220e:	0025      	movs	r5, r4
 8002210:	193b      	adds	r3, r7, r4
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	615a      	str	r2, [r3, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681c      	ldr	r4, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2182      	movs	r1, #130	; 0x82
 8002224:	0089      	lsls	r1, r1, #2
 8002226:	468c      	mov	ip, r1
 8002228:	4463      	add	r3, ip
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	f7fe ffe4 	bl	8001200 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002238:	0001      	movs	r1, r0
 800223a:	197a      	adds	r2, r7, r5
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	e779      	b.n	800213e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	2b18      	cmp	r3, #24
 8002252:	dc6d      	bgt.n	8002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x208>
      if (subscribers[i] != 0) // non-empty slot
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	493a      	ldr	r1, [pc, #232]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 800225a:	468c      	mov	ip, r1
 800225c:	4462      	add	r2, ip
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	58d3      	ldr	r3, [r2, r3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d060      	beq.n	8002328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x200>
        ti.topic_id = subscribers[i]->id_;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 800226c:	468c      	mov	ip, r1
 800226e:	4462      	add	r2, ip
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	58d3      	ldr	r3, [r2, r3]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	b29a      	uxth	r2, r3
 8002278:	250c      	movs	r5, #12
 800227a:	197b      	adds	r3, r7, r5
 800227c:	809a      	strh	r2, [r3, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	4930      	ldr	r1, [pc, #192]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 8002284:	468c      	mov	ip, r1
 8002286:	4462      	add	r2, ip
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	58d3      	ldr	r3, [r2, r3]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	197b      	adds	r3, r7, r5
 8002290:	609a      	str	r2, [r3, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002296:	492b      	ldr	r1, [pc, #172]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 8002298:	468c      	mov	ip, r1
 800229a:	4462      	add	r2, ip
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	58d1      	ldr	r1, [r2, r3]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	4827      	ldr	r0, [pc, #156]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 80022a6:	4684      	mov	ip, r0
 80022a8:	4462      	add	r2, ip
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	58d3      	ldr	r3, [r2, r3]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3308      	adds	r3, #8
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0008      	movs	r0, r1
 80022b6:	4798      	blx	r3
 80022b8:	0002      	movs	r2, r0
 80022ba:	197b      	adds	r3, r7, r5
 80022bc:	60da      	str	r2, [r3, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c2:	4920      	ldr	r1, [pc, #128]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 80022c4:	468c      	mov	ip, r1
 80022c6:	4462      	add	r2, ip
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	58d1      	ldr	r1, [r2, r3]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	481c      	ldr	r0, [pc, #112]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 80022d2:	4684      	mov	ip, r0
 80022d4:	4462      	add	r2, ip
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	58d3      	ldr	r3, [r2, r3]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0008      	movs	r0, r1
 80022e2:	4798      	blx	r3
 80022e4:	0002      	movs	r2, r0
 80022e6:	197b      	adds	r3, r7, r5
 80022e8:	611a      	str	r2, [r3, #16]
        ti.buffer_size = INPUT_SIZE;
 80022ea:	197b      	adds	r3, r7, r5
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	615a      	str	r2, [r3, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681c      	ldr	r4, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	4911      	ldr	r1, [pc, #68]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 80022fe:	468c      	mov	ip, r1
 8002300:	4462      	add	r2, ip
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	58d1      	ldr	r1, [r2, r3]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	480e      	ldr	r0, [pc, #56]	; (8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x21c>)
 800230c:	4684      	mov	ip, r0
 800230e:	4462      	add	r2, ip
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	58d3      	ldr	r3, [r2, r3]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0008      	movs	r0, r1
 800231c:	4798      	blx	r3
 800231e:	0001      	movs	r1, r0
 8002320:	197a      	adds	r2, r7, r5
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3301      	adds	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	e78e      	b.n	800224e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x126>
    configured_ = true;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	2390      	movs	r3, #144	; 0x90
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	2101      	movs	r1, #1
 8002338:	54d1      	strb	r1, [r2, r3]
  }
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b00a      	add	sp, #40	; 0x28
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	00000222 	.word	0x00000222

08002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002352:	2408      	movs	r4, #8
 8002354:	193b      	adds	r3, r7, r4
 8002356:	0018      	movs	r0, r3
 8002358:	f7fe f8fc 	bl	8000554 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff f8ad 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8002366:	0002      	movs	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4920      	ldr	r1, [pc, #128]	; (80023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0xa4>)
 800236c:	585b      	ldr	r3, [r3, r1]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	0025      	movs	r5, r4
 8002376:	197b      	adds	r3, r7, r5
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f7fe f958 	bl	8000630 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002380:	197b      	adds	r3, r7, r5
 8002382:	685c      	ldr	r4, [r3, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	22fa      	movs	r2, #250	; 0xfa
 8002388:	0091      	lsls	r1, r2, #2
 800238a:	0018      	movs	r0, r3
 800238c:	f7fd fec4 	bl	8000118 <__udivsi3>
 8002390:	0003      	movs	r3, r0
 8002392:	18e2      	adds	r2, r4, r3
 8002394:	197b      	adds	r3, r7, r5
 8002396:	605a      	str	r2, [r3, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002398:	197b      	adds	r3, r7, r5
 800239a:	689c      	ldr	r4, [r3, #8]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	22fa      	movs	r2, #250	; 0xfa
 80023a0:	0091      	lsls	r1, r2, #2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd ff3e 	bl	8000224 <__aeabi_uidivmod>
 80023a8:	000b      	movs	r3, r1
 80023aa:	0019      	movs	r1, r3
 80023ac:	000a      	movs	r2, r1
 80023ae:	0152      	lsls	r2, r2, #5
 80023b0:	1a52      	subs	r2, r2, r1
 80023b2:	0193      	lsls	r3, r2, #6
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	185b      	adds	r3, r3, r1
 80023ba:	019b      	lsls	r3, r3, #6
 80023bc:	18e2      	adds	r2, r4, r3
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	609a      	str	r2, [r3, #8]
    this->setNow(t.data);
 80023c2:	197b      	adds	r3, r7, r5
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f8c0 	bl	8002550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff f873 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 80023da:	0002      	movs	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0xa8>)
 80023e0:	505a      	str	r2, [r3, r1]
  }
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b006      	add	sp, #24
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	00000414 	.word	0x00000414
 80023f0:	00000908 	.word	0x00000908

080023f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b63      	cmp	r3, #99	; 0x63
 8002404:	dd0a      	ble.n	800241c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	2390      	movs	r3, #144	; 0x90
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	2201      	movs	r2, #1
 8002410:	4053      	eors	r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
      return 0;
 8002418:	2300      	movs	r3, #0
 800241a:	e083      	b.n	8002524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x130>
    int l = msg->serialize(message_out + 7);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4941      	ldr	r1, [pc, #260]	; (800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x138>)
 8002426:	468c      	mov	ip, r1
 8002428:	4462      	add	r2, ip
 800242a:	1dd1      	adds	r1, r2, #7
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	0010      	movs	r0, r2
 8002430:	4798      	blx	r3
 8002432:	0003      	movs	r3, r0
 8002434:	617b      	str	r3, [r7, #20]
    message_out[0] = 0xff;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a3c      	ldr	r2, [pc, #240]	; (800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x138>)
 800243a:	21ff      	movs	r1, #255	; 0xff
 800243c:	5499      	strb	r1, [r3, r2]
    message_out[1] = PROTOCOL_VER;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13c>)
 8002442:	21fe      	movs	r1, #254	; 0xfe
 8002444:	5499      	strb	r1, [r3, r2]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	b2d9      	uxtb	r1, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>)
 800244e:	5499      	strb	r1, [r3, r2]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	b29b      	uxth	r3, r3
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	b2d9      	uxtb	r1, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a36      	ldr	r2, [pc, #216]	; (8002538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x144>)
 800245e:	5499      	strb	r1, [r3, r2]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a34      	ldr	r2, [pc, #208]	; (8002534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>)
 8002464:	5c9a      	ldrb	r2, [r3, r2]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4933      	ldr	r1, [pc, #204]	; (8002538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x144>)
 800246a:	5c5b      	ldrb	r3, [r3, r1]
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	b2d9      	uxtb	r1, r3
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	23c5      	movs	r3, #197	; 0xc5
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	54d1      	strb	r1, [r2, r3]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	b2d9      	uxtb	r1, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a2e      	ldr	r2, [pc, #184]	; (800253c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x148>)
 8002484:	5499      	strb	r1, [r3, r2]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	b21b      	sxth	r3, r3
 800248a:	121b      	asrs	r3, r3, #8
 800248c:	b21b      	sxth	r3, r3
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>)
 8002494:	5499      	strb	r1, [r3, r2]
    int chk = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800249a:	2305      	movs	r3, #5
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3306      	adds	r3, #6
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dc0d      	bgt.n	80024c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd0>
      chk += message_out[i];
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4920      	ldr	r1, [pc, #128]	; (800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x138>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	18d3      	adds	r3, r2, r3
 80024b0:	185b      	adds	r3, r3, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	001a      	movs	r2, r3
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	189b      	adds	r3, r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	3301      	adds	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e7ec      	b.n	800249e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xaa>
    l += 7;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3307      	adds	r3, #7
 80024c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x150>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	d503      	bpl.n	80024da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe6>
 80024d2:	3b01      	subs	r3, #1
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	6179      	str	r1, [r7, #20]
 80024e2:	43d2      	mvns	r2, r2
 80024e4:	b2d0      	uxtb	r0, r2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4910      	ldr	r1, [pc, #64]	; (800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x138>)
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	185b      	adds	r3, r3, r1
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dc0b      	bgt.n	8002514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>
      hardware_.write(message_out, l);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1d18      	adds	r0, r3, #4
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x138>)
 8002504:	4694      	mov	ip, r2
 8002506:	4463      	add	r3, ip
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	0019      	movs	r1, r3
 800250c:	f7fe ff88 	bl	8001420 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	e007      	b.n	8002524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x130>
      logerror("Message from device dropped: message larger than buffer.");
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x158>)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f860 	bl	80025e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002520:	2301      	movs	r3, #1
 8002522:	425b      	negs	r3, r3
  }
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b008      	add	sp, #32
 800252a:	bd80      	pop	{r7, pc}
 800252c:	00000624 	.word	0x00000624
 8002530:	00000625 	.word	0x00000625
 8002534:	00000626 	.word	0x00000626
 8002538:	00000627 	.word	0x00000627
 800253c:	00000629 	.word	0x00000629
 8002540:	0000062a 	.word	0x0000062a
 8002544:	800000ff 	.word	0x800000ff
 8002548:	ffffff00 	.word	0xffffff00
 800254c:	08005c9c 	.word	0x08005c9c

08002550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	0018      	movs	r0, r3
 8002560:	f7fe ffae 	bl	80014c0 <_ZN13STM32Hardware4timeEv>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	22fa      	movs	r2, #250	; 0xfa
 8002570:	0091      	lsls	r1, r2, #2
 8002572:	0018      	movs	r0, r3
 8002574:	f7fd fdd0 	bl	8000118 <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	1ae3      	subs	r3, r4, r3
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	2383      	movs	r3, #131	; 0x83
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	50d1      	str	r1, [r2, r3]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685c      	ldr	r4, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22fa      	movs	r2, #250	; 0xfa
 800258e:	0091      	lsls	r1, r2, #2
 8002590:	0018      	movs	r0, r3
 8002592:	f7fd fe47 	bl	8000224 <__aeabi_uidivmod>
 8002596:	000b      	movs	r3, r1
 8002598:	0019      	movs	r1, r3
 800259a:	000a      	movs	r2, r1
 800259c:	0152      	lsls	r2, r2, #5
 800259e:	1a52      	subs	r2, r2, r1
 80025a0:	0193      	lsls	r3, r2, #6
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	185b      	adds	r3, r3, r1
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	1ae3      	subs	r3, r4, r3
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x88>)
 80025ae:	189a      	adds	r2, r3, r2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x8c>)
 80025b4:	505a      	str	r2, [r3, r1]
    normalizeSecNSec(sec_offset, nsec_offset);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2283      	movs	r2, #131	; 0x83
 80025ba:	00d2      	lsls	r2, r2, #3
 80025bc:	189a      	adds	r2, r3, r2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4906      	ldr	r1, [pc, #24]	; (80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x8c>)
 80025c2:	468c      	mov	ip, r1
 80025c4:	4463      	add	r3, ip
 80025c6:	0019      	movs	r1, r3
 80025c8:	0010      	movs	r0, r2
 80025ca:	f7fd fe31 	bl	8000230 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b005      	add	sp, #20
 80025d4:	bd90      	pop	{r4, r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	3b9aca00 	.word	0x3b9aca00
 80025dc:	0000041c 	.word	0x0000041c

080025e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2103      	movs	r1, #3
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fd57 	bl	80020a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <_Z41__static_initialization_and_destruction_0ii>:
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10d      	bne.n	800262c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d109      	bne.n	800262c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff f86c 	bl	80016f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::ServiceClient<std_srvs::Trigger::Request, std_srvs::Trigger::Response> next_waypoint_client("waypoint_manager/waypoint_server/next_waypoint");
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f7ff f9dc 	bl	80019e4 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEEC1EPKc>
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	0000ffff 	.word	0x0000ffff
 8002638:	200001ec 	.word	0x200001ec
 800263c:	08005cd8 	.word	0x08005cd8
 8002640:	20000b28 	.word	0x20000b28

08002644 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE8callbackEPh>:

  // these refer to the subscriber
  virtual void callback(unsigned char *data) override
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  {
    ret->deserialize(data);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3304      	adds	r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	0010      	movs	r0, r2
 8002660:	4798      	blx	r3
    waiting = false;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
  }
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->resp.getMD5();
  }
  virtual int getEndpointType() override
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  {
    return rosserial_msgs::TopicInfo::ID_SERVICE_CLIENT + rosserial_msgs::TopicInfo::ID_SUBSCRIBER;
 800267a:	2305      	movs	r3, #5
  }
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
    return this->resp.getType();
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3310      	adds	r3, #16
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff f80b 	bl	80016ac <_ZN8std_srvs15TriggerResponse7getTypeEv>
 8002696:	0003      	movs	r3, r0
  }
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN3ros13ServiceClientIN8std_srvs14TriggerRequestENS1_15TriggerResponseEE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    return this->resp.getMD5();
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3310      	adds	r3, #16
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff f809 	bl	80016c4 <_ZN8std_srvs15TriggerResponse6getMD5Ev>
 80026b2:	0003      	movs	r3, r0
  }
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    return configured_;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	2390      	movs	r3, #144	; 0x90
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
  };
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_GLOBAL__sub_I_nh>:
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <_GLOBAL__sub_I_nh+0x14>)
 80026da:	0019      	movs	r1, r3
 80026dc:	2001      	movs	r0, #1
 80026de:	f7ff ff8f 	bl	8002600 <_Z41__static_initialization_and_destruction_0ii>
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	0000ffff 	.word	0x0000ffff

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_MspInit+0x44>)
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_MspInit+0x44>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	619a      	str	r2, [r3, #24]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_MspInit+0x44>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2201      	movs	r2, #1
 8002704:	4013      	ands	r3, r2
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_MspInit+0x44>)
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_MspInit+0x44>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0549      	lsls	r1, r1, #21
 8002714:	430a      	orrs	r2, r1
 8002716:	61da      	str	r2, [r3, #28]
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_MspInit+0x44>)
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	055b      	lsls	r3, r3, #21
 8002720:	4013      	ands	r3, r2
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	429a      	cmp	r2, r3
 8002746:	d10b      	bne.n	8002760 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_TIM_Base_MspInit+0x34>)
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_TIM_Base_MspInit+0x34>)
 800274e:	2101      	movs	r1, #1
 8002750:	430a      	orrs	r2, r1
 8002752:	61da      	str	r2, [r3, #28]
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_TIM_Base_MspInit+0x34>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b08b      	sub	sp, #44	; 0x2c
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	2414      	movs	r4, #20
 8002776:	193b      	adds	r3, r7, r4
 8002778:	0018      	movs	r0, r3
 800277a:	2314      	movs	r3, #20
 800277c:	001a      	movs	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	f003 f84d 	bl	800581e <memset>
  if(huart->Instance==USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a48      	ldr	r2, [pc, #288]	; (80028ac <HAL_UART_MspInit+0x140>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d000      	beq.n	8002790 <HAL_UART_MspInit+0x24>
 800278e:	e088      	b.n	80028a2 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002790:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_UART_MspInit+0x144>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_UART_MspInit+0x144>)
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	0289      	lsls	r1, r1, #10
 800279a:	430a      	orrs	r2, r1
 800279c:	61da      	str	r2, [r3, #28]
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_UART_MspInit+0x144>)
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b40      	ldr	r3, [pc, #256]	; (80028b0 <HAL_UART_MspInit+0x144>)
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_UART_MspInit+0x144>)
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	0289      	lsls	r1, r1, #10
 80027b6:	430a      	orrs	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_UART_MspInit+0x144>)
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80027c8:	0021      	movs	r1, r4
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <HAL_UART_MspInit+0x148>)
 80027ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2202      	movs	r2, #2
 80027d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2203      	movs	r2, #3
 80027e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2201      	movs	r2, #1
 80027e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	187a      	adds	r2, r7, r1
 80027ea:	2390      	movs	r3, #144	; 0x90
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fcbb 	bl	800316c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_UART_MspInit+0x150>)
 80027fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 800281c:	2220      	movs	r2, #32
 800281e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0192      	lsls	r2, r2, #6
 8002826:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fa88 	bl	8002d40 <HAL_DMA_Init>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002834:	f7fd fe6c 	bl	8000510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 800283c:	675a      	str	r2, [r3, #116]	; 0x74
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002846:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_UART_MspInit+0x154>)
 800284c:	2210      	movs	r2, #16
 800284e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285c:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_UART_MspInit+0x154>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002868:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_UART_MspInit+0x154>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0192      	lsls	r2, r2, #6
 8002874:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_UART_MspInit+0x154>)
 8002878:	0018      	movs	r0, r3
 800287a:	f000 fa61 	bl	8002d40 <HAL_DMA_Init>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8002882:	f7fd fe45 	bl	8000510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_UART_MspInit+0x154>)
 800288a:	671a      	str	r2, [r3, #112]	; 0x70
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_UART_MspInit+0x154>)
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	201c      	movs	r0, #28
 8002898:	f000 fa20 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800289c:	201c      	movs	r0, #28
 800289e:	f000 fa32 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b00b      	add	sp, #44	; 0x2c
 80028a8:	bd90      	pop	{r4, r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	40004400 	.word	0x40004400
 80028b0:	40021000 	.word	0x40021000
 80028b4:	00008004 	.word	0x00008004
 80028b8:	20000160 	.word	0x20000160
 80028bc:	40020058 	.word	0x40020058
 80028c0:	200001a4 	.word	0x200001a4
 80028c4:	40020044 	.word	0x40020044

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <NMI_Handler+0x4>

080028ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler+0x4>

080028d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ec:	f000 f90a 	bl	8002b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fb49 	bl	8002f96 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <DMA1_Channel4_5_IRQHandler+0x20>)
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fb45 	bl	8002f96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	200001a4 	.word	0x200001a4
 8002918:	20000160 	.word	0x20000160

0800291c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <USART2_IRQHandler+0x14>)
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fe62 	bl	80045ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	200000d8 	.word	0x200000d8

08002934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  return 1;
 8002938:	2301      	movs	r3, #1
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <_kill>:

int _kill(int pid, int sig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800294a:	f002 ff35 	bl	80057b8 <__errno>
 800294e:	0003      	movs	r3, r0
 8002950:	2216      	movs	r2, #22
 8002952:	601a      	str	r2, [r3, #0]
  return -1;
 8002954:	2301      	movs	r3, #1
 8002956:	425b      	negs	r3, r3
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <_exit>:

void _exit (int status)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002968:	2301      	movs	r3, #1
 800296a:	425a      	negs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff ffe5 	bl	8002940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002976:	e7fe      	b.n	8002976 <_exit+0x16>

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f002 ff06 	bl	80057b8 <__errno>
 80029ac:	0003      	movs	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	425b      	negs	r3, r3
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	18d2      	adds	r2, r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <_sbrk+0x64>)
 80029c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20001800 	.word	0x20001800
 80029d8:	00000400 	.word	0x00000400
 80029dc:	20000b64 	.word	0x20000b64
 80029e0:	20000b80 	.word	0x20000b80

080029e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029f0:	4813      	ldr	r0, [pc, #76]	; (8002a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029f4:	f7ff fff6 	bl	80029e4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80029f8:	4812      	ldr	r0, [pc, #72]	; (8002a44 <LoopForever+0x6>)
    LDR R1, [R0]
 80029fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80029fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <LoopForever+0xa>)
    CMP R1, R2
 8002a00:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002a02:	d105      	bne.n	8002a10 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002a04:	4811      	ldr	r0, [pc, #68]	; (8002a4c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002a06:	4912      	ldr	r1, [pc, #72]	; (8002a50 <LoopForever+0x12>)
    STR R1, [R0]
 8002a08:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002a0c:	4912      	ldr	r1, [pc, #72]	; (8002a58 <LoopForever+0x1a>)
    STR R1, [R0]
 8002a0e:	6001      	str	r1, [r0, #0]

08002a10 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a10:	4812      	ldr	r0, [pc, #72]	; (8002a5c <LoopForever+0x1e>)
  ldr r1, =_edata
 8002a12:	4913      	ldr	r1, [pc, #76]	; (8002a60 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <LoopForever+0x26>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002a28:	4c10      	ldr	r4, [pc, #64]	; (8002a6c <LoopForever+0x2e>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a36:	f002 fec5 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3a:	f7fd fc1d 	bl	8000278 <main>

08002a3e <LoopForever>:

LoopForever:
    b LoopForever
 8002a3e:	e7fe      	b.n	8002a3e <LoopForever>
  ldr   r0, =_estack
 8002a40:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002a44:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002a48:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002a4c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002a50:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002a54:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002a58:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a64:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 8002a68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a6c:	20000b7c 	.word	0x20000b7c

08002a70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_IRQHandler>
	...

08002a74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_Init+0x24>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_Init+0x24>)
 8002a7e:	2110      	movs	r1, #16
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 f809 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8a:	f7ff fe2f 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_InitTick+0x5c>)
 8002aa6:	681c      	ldr	r4, [r3, #0]
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_InitTick+0x60>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	0019      	movs	r1, r3
 8002aae:	23fa      	movs	r3, #250	; 0xfa
 8002ab0:	0098      	lsls	r0, r3, #2
 8002ab2:	f7fd fb31 	bl	8000118 <__udivsi3>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	0019      	movs	r1, r3
 8002aba:	0020      	movs	r0, r4
 8002abc:	f7fd fb2c 	bl	8000118 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f92f 	bl	8002d26 <HAL_SYSTICK_Config>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00f      	b.n	8002af0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d80b      	bhi.n	8002aee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	425b      	negs	r3, r3
 8002adc:	2200      	movs	r2, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f8fc 	bl	8002cdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_InitTick+0x64>)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b003      	add	sp, #12
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_IncTick+0x1c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_IncTick+0x20>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	18d2      	adds	r2, r2, r3
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_IncTick+0x20>)
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000008 	.word	0x20000008
 8002b24:	20000b68 	.word	0x20000b68

08002b28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <HAL_GetTick+0x10>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000b68 	.word	0x20000b68

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3301      	adds	r3, #1
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	f7ff ffe0 	bl	8002b28 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000008 	.word	0x20000008

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b7f      	cmp	r3, #127	; 0x7f
 8002b96:	d809      	bhi.n	8002bac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	231f      	movs	r3, #31
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <__NVIC_EnableIRQ+0x30>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4091      	lsls	r1, r2
 8002ba8:	000a      	movs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
  }
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	e000e100 	.word	0xe000e100

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b7f      	cmp	r3, #127	; 0x7f
 8002bcc:	d828      	bhi.n	8002c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bce:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <__NVIC_SetPriority+0xd4>)
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	33c0      	adds	r3, #192	; 0xc0
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	589b      	ldr	r3, [r3, r2]
 8002bde:	1dfa      	adds	r2, r7, #7
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	0011      	movs	r1, r2
 8002be4:	2203      	movs	r2, #3
 8002be6:	400a      	ands	r2, r1
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	21ff      	movs	r1, #255	; 0xff
 8002bec:	4091      	lsls	r1, r2
 8002bee:	000a      	movs	r2, r1
 8002bf0:	43d2      	mvns	r2, r2
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	2303      	movs	r3, #3
 8002c06:	4003      	ands	r3, r0
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c0c:	481f      	ldr	r0, [pc, #124]	; (8002c8c <__NVIC_SetPriority+0xd4>)
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	430a      	orrs	r2, r1
 8002c18:	33c0      	adds	r3, #192	; 0xc0
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c1e:	e031      	b.n	8002c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <__NVIC_SetPriority+0xd8>)
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	0019      	movs	r1, r3
 8002c28:	230f      	movs	r3, #15
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	3b08      	subs	r3, #8
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3306      	adds	r3, #6
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	3304      	adds	r3, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1dfa      	adds	r2, r7, #7
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	2203      	movs	r2, #3
 8002c42:	400a      	ands	r2, r1
 8002c44:	00d2      	lsls	r2, r2, #3
 8002c46:	21ff      	movs	r1, #255	; 0xff
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	43d2      	mvns	r2, r2
 8002c4e:	401a      	ands	r2, r3
 8002c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	22ff      	movs	r2, #255	; 0xff
 8002c58:	401a      	ands	r2, r3
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	2303      	movs	r3, #3
 8002c62:	4003      	ands	r3, r0
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c68:	4809      	ldr	r0, [pc, #36]	; (8002c90 <__NVIC_SetPriority+0xd8>)
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	001c      	movs	r4, r3
 8002c70:	230f      	movs	r3, #15
 8002c72:	4023      	ands	r3, r4
 8002c74:	3b08      	subs	r3, #8
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	3306      	adds	r3, #6
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	18c3      	adds	r3, r0, r3
 8002c80:	3304      	adds	r3, #4
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b003      	add	sp, #12
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	045b      	lsls	r3, r3, #17
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d301      	bcc.n	8002cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e010      	b.n	8002cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <SysTick_Config+0x44>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	425b      	negs	r3, r3
 8002cb8:	2103      	movs	r1, #3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff ff7c 	bl	8002bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x44>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x44>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	1c02      	adds	r2, r0, #0
 8002cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff ff5d 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	1dfb      	adds	r3, r7, #7
 8002d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d12:	1dfb      	adds	r3, r7, #7
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff ff33 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff ffaf 	bl	8002c94 <SysTick_Config>
 8002d36:	0003      	movs	r3, r0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e036      	b.n	8002dc4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2221      	movs	r2, #33	; 0x21
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_DMA_Init+0x8c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 f9c4 	bl	8003134 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	ffffc00f 	.word	0xffffc00f

08002dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2317      	movs	r3, #23
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_DMA_Start_IT+0x24>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e04f      	b.n	8002e94 <HAL_DMA_Start_IT+0xc4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2221      	movs	r2, #33	; 0x21
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d13a      	bne.n	8002e7e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	438a      	bics	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f954 	bl	80030da <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	210e      	movs	r1, #14
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e00f      	b.n	8002e6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	210a      	movs	r1, #10
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2104      	movs	r1, #4
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e007      	b.n	8002e8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e86:	2317      	movs	r3, #23
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002e8e:	2317      	movs	r3, #23
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2221      	movs	r2, #33	; 0x21
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d008      	beq.n	8002ec2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e020      	b.n	8002f04 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	210e      	movs	r1, #14
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2101      	movs	r1, #1
 8002eec:	4091      	lsls	r1, r2
 8002eee:	000a      	movs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2221      	movs	r2, #33	; 0x21
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	210f      	movs	r1, #15
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2221      	movs	r2, #33	; 0x21
 8002f20:	5c9b      	ldrb	r3, [r3, r2]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d006      	beq.n	8002f36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e028      	b.n	8002f88 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	210e      	movs	r1, #14
 8002f42:	438a      	bics	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4091      	lsls	r1, r2
 8002f62:	000a      	movs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2221      	movs	r2, #33	; 0x21
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	0010      	movs	r0, r2
 8002f86:	4798      	blx	r3
    }
  }
  return status;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	0013      	movs	r3, r2
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d024      	beq.n	8003008 <HAL_DMA_IRQHandler+0x72>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d020      	beq.n	8003008 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2104      	movs	r1, #4
 8002fde:	438a      	bics	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2104      	movs	r1, #4
 8002fec:	4091      	lsls	r1, r2
 8002fee:	000a      	movs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d100      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x66>
 8002ffa:	e06a      	b.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	0010      	movs	r0, r2
 8003004:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003006:	e064      	b.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2202      	movs	r2, #2
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	d02b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xda>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2202      	movs	r2, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2220      	movs	r2, #32
 8003028:	4013      	ands	r3, r2
 800302a:	d10b      	bne.n	8003044 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	210a      	movs	r1, #10
 8003038:	438a      	bics	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2221      	movs	r2, #33	; 0x21
 8003040:	2101      	movs	r1, #1
 8003042:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	2102      	movs	r1, #2
 800304e:	4091      	lsls	r1, r2
 8003050:	000a      	movs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	0010      	movs	r0, r2
 800306c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800306e:	e030      	b.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2208      	movs	r2, #8
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	d028      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2208      	movs	r2, #8
 8003084:	4013      	ands	r3, r2
 8003086:	d024      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	210e      	movs	r1, #14
 8003094:	438a      	bics	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	2101      	movs	r1, #1
 80030a2:	4091      	lsls	r1, r2
 80030a4:	000a      	movs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2221      	movs	r2, #33	; 0x21
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	2100      	movs	r1, #0
 80030bc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	0010      	movs	r0, r2
 80030ce:	4798      	blx	r3
    }
  }
}
 80030d0:	e7ff      	b.n	80030d2 <HAL_DMA_IRQHandler+0x13c>
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}

080030da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f0:	2101      	movs	r1, #1
 80030f2:	4091      	lsls	r1, r2
 80030f4:	000a      	movs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b10      	cmp	r3, #16
 8003106:	d108      	bne.n	800311a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003118:	e007      	b.n	800312a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	60da      	str	r2, [r3, #12]
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <DMA_CalcBaseAndBitshift+0x30>)
 8003142:	4694      	mov	ip, r2
 8003144:	4463      	add	r3, ip
 8003146:	2114      	movs	r1, #20
 8003148:	0018      	movs	r0, r3
 800314a:	f7fc ffe5 	bl	8000118 <__udivsi3>
 800314e:	0003      	movs	r3, r0
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <DMA_CalcBaseAndBitshift+0x34>)
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	bffdfff8 	.word	0xbffdfff8
 8003168:	40020000 	.word	0x40020000

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e149      	b.n	8003410 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4091      	lsls	r1, r2
 8003186:	000a      	movs	r2, r1
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <HAL_GPIO_Init+0x28>
 8003192:	e13a      	b.n	800340a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	4013      	ands	r3, r2
 800319c:	2b01      	cmp	r3, #1
 800319e:	d005      	beq.n	80031ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	43da      	mvns	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	0013      	movs	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e2:	2201      	movs	r2, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	43da      	mvns	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	2201      	movs	r2, #1
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	4013      	ands	r3, r2
 8003216:	2b03      	cmp	r3, #3
 8003218:	d017      	beq.n	800324a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	4013      	ands	r3, r2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d123      	bne.n	800329e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	58d3      	ldr	r3, [r2, r3]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2207      	movs	r2, #7
 8003268:	4013      	ands	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2107      	movs	r1, #7
 8003282:	400b      	ands	r3, r1
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	401a      	ands	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_GPIO_Init+0x174>
 80032de:	e094      	b.n	800340a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <HAL_GPIO_Init+0x2bc>)
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	4b50      	ldr	r3, [pc, #320]	; (8003428 <HAL_GPIO_Init+0x2bc>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <HAL_GPIO_Init+0x2bc>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x2c0>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	589b      	ldr	r3, [r3, r2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2203      	movs	r2, #3
 800330a:	4013      	ands	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	43da      	mvns	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	2390      	movs	r3, #144	; 0x90
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	429a      	cmp	r2, r3
 8003324:	d00d      	beq.n	8003342 <HAL_GPIO_Init+0x1d6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a41      	ldr	r2, [pc, #260]	; (8003430 <HAL_GPIO_Init+0x2c4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <HAL_GPIO_Init+0x1d2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a40      	ldr	r2, [pc, #256]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_GPIO_Init+0x1ce>
 8003336:	2302      	movs	r3, #2
 8003338:	e004      	b.n	8003344 <HAL_GPIO_Init+0x1d8>
 800333a:	2305      	movs	r3, #5
 800333c:	e002      	b.n	8003344 <HAL_GPIO_Init+0x1d8>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x1d8>
 8003342:	2300      	movs	r3, #0
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	2103      	movs	r1, #3
 8003348:	400a      	ands	r2, r1
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	4093      	lsls	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003354:	4935      	ldr	r1, [pc, #212]	; (800342c <HAL_GPIO_Init+0x2c0>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003362:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43da      	mvns	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	035b      	lsls	r3, r3, #13
 800337a:	4013      	ands	r3, r2
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	43da      	mvns	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	039b      	lsls	r3, r3, #14
 80033a4:	4013      	ands	r3, r2
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43da      	mvns	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	4013      	ands	r3, r2
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	025b      	lsls	r3, r3, #9
 80033f8:	4013      	ands	r3, r2
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	40da      	lsrs	r2, r3
 8003418:	1e13      	subs	r3, r2, #0
 800341a:	d000      	beq.n	800341e <HAL_GPIO_Init+0x2b2>
 800341c:	e6ae      	b.n	800317c <HAL_GPIO_Init+0x10>
  } 
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b006      	add	sp, #24
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	40010000 	.word	0x40010000
 8003430:	48000400 	.word	0x48000400
 8003434:	48000800 	.word	0x48000800
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	000a      	movs	r2, r1
 8003446:	1cbb      	adds	r3, r7, #2
 8003448:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	1cba      	adds	r2, r7, #2
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	4013      	ands	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003456:	230f      	movs	r3, #15
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e003      	b.n	8003468 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
  }
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f000 fb76 	bl	8003b78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x20>
 8003496:	e08e      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003498:	4bc5      	ldr	r3, [pc, #788]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	220c      	movs	r2, #12
 800349e:	4013      	ands	r3, r2
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d00e      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a4:	4bc2      	ldr	r3, [pc, #776]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d117      	bne.n	80034e0 <HAL_RCC_OscConfig+0x68>
 80034b0:	4bbf      	ldr	r3, [pc, #764]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	025b      	lsls	r3, r3, #9
 80034b8:	401a      	ands	r2, r3
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10e      	bne.n	80034e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4bbb      	ldr	r3, [pc, #748]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	4013      	ands	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_RCC_OscConfig+0x58>
 80034ce:	e071      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d000      	beq.n	80034da <HAL_RCC_OscConfig+0x62>
 80034d8:	e06c      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f000 fb4c 	bl	8003b78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x80>
 80034e8:	4bb1      	ldr	r3, [pc, #708]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4bb0      	ldr	r3, [pc, #704]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	0249      	lsls	r1, r1, #9
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e02f      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0xa2>
 8003500:	4bab      	ldr	r3, [pc, #684]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4baa      	ldr	r3, [pc, #680]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003506:	49ab      	ldr	r1, [pc, #684]	; (80037b4 <HAL_RCC_OscConfig+0x33c>)
 8003508:	400a      	ands	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	4ba8      	ldr	r3, [pc, #672]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4ba7      	ldr	r3, [pc, #668]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003512:	49a9      	ldr	r1, [pc, #676]	; (80037b8 <HAL_RCC_OscConfig+0x340>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e01e      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10e      	bne.n	8003540 <HAL_RCC_OscConfig+0xc8>
 8003522:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4ba2      	ldr	r3, [pc, #648]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	02c9      	lsls	r1, r1, #11
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	4b9f      	ldr	r3, [pc, #636]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b9e      	ldr	r3, [pc, #632]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	0249      	lsls	r1, r1, #9
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 8003540:	4b9b      	ldr	r3, [pc, #620]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b9a      	ldr	r3, [pc, #616]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003546:	499b      	ldr	r1, [pc, #620]	; (80037b4 <HAL_RCC_OscConfig+0x33c>)
 8003548:	400a      	ands	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	4b98      	ldr	r3, [pc, #608]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b97      	ldr	r3, [pc, #604]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003552:	4999      	ldr	r1, [pc, #612]	; (80037b8 <HAL_RCC_OscConfig+0x340>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d014      	beq.n	800358a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff fae2 	bl	8002b28 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800356a:	f7ff fadd 	bl	8002b28 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e2fd      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357c:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0xf2>
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7ff facd 	bl	8002b28 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003594:	f7ff fac8 	bl	8002b28 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e2e8      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	4013      	ands	r3, r2
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x11c>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d100      	bne.n	80035c2 <HAL_RCC_OscConfig+0x14a>
 80035c0:	e06c      	b.n	800369c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c2:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	220c      	movs	r2, #12
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035cc:	4b78      	ldr	r3, [pc, #480]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	220c      	movs	r2, #12
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11f      	bne.n	8003618 <HAL_RCC_OscConfig+0x1a0>
 80035d8:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	025b      	lsls	r3, r3, #9
 80035e0:	401a      	ands	r2, r3
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2202      	movs	r2, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x188>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e2bb      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22f8      	movs	r2, #248	; 0xf8
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00da      	lsls	r2, r3, #3
 8003610:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e041      	b.n	800369c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d024      	beq.n	800366a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003626:	2101      	movs	r1, #1
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7ff fa7c 	bl	8002b28 <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003636:	f7ff fa77 	bl	8002b28 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e297      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	4013      	ands	r3, r2
 8003650:	d0f1      	beq.n	8003636 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	22f8      	movs	r2, #248	; 0xf8
 8003658:	4393      	bics	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00da      	lsls	r2, r3, #3
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7ff fa57 	bl	8002b28 <HAL_GetTick>
 800367a:	0003      	movs	r3, r0
 800367c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7ff fa52 	bl	8002b28 <HAL_GetTick>
 8003684:	0002      	movs	r2, r0
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e272      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	d1f1      	bne.n	8003680 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	4013      	ands	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d019      	beq.n	80036e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff fa35 	bl	8002b28 <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c4:	f7ff fa30 	bl	8002b28 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e250      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x24c>
 80036e0:	e018      	b.n	8003714 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e2:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7ff fa1b 	bl	8002b28 <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7ff fa16 	bl	8002b28 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e236      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2202      	movs	r2, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d1f1      	bne.n	80036f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d100      	bne.n	8003720 <HAL_RCC_OscConfig+0x2a8>
 800371e:	e0b5      	b.n	800388c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003720:	201f      	movs	r0, #31
 8003722:	183b      	adds	r3, r7, r0
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	055b      	lsls	r3, r3, #21
 8003730:	4013      	ands	r3, r2
 8003732:	d110      	bne.n	8003756 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	0549      	lsls	r1, r1, #21
 800373e:	430a      	orrs	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	055b      	lsls	r3, r3, #21
 800374a:	4013      	ands	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003750:	183b      	adds	r3, r7, r0
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	0049      	lsls	r1, r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7ff f9da 	bl	8002b28 <HAL_GetTick>
 8003774:	0003      	movs	r3, r0
 8003776:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7ff f9d5 	bl	8002b28 <HAL_GetTick>
 800377e:	0002      	movs	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	; 0x64
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1f5      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10f      	bne.n	80037c0 <HAL_RCC_OscConfig+0x348>
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80037a6:	2101      	movs	r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	621a      	str	r2, [r3, #32]
 80037ac:	e036      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	40021000 	.word	0x40021000
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	fffbffff 	.word	0xfffbffff
 80037bc:	40007000 	.word	0x40007000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x36a>
 80037c8:	4bca      	ldr	r3, [pc, #808]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	4bc9      	ldr	r3, [pc, #804]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	621a      	str	r2, [r3, #32]
 80037d4:	4bc7      	ldr	r3, [pc, #796]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4bc6      	ldr	r3, [pc, #792]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037da:	2104      	movs	r1, #4
 80037dc:	438a      	bics	r2, r1
 80037de:	621a      	str	r2, [r3, #32]
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x38c>
 80037ea:	4bc2      	ldr	r3, [pc, #776]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	4bc1      	ldr	r3, [pc, #772]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037f0:	2104      	movs	r1, #4
 80037f2:	430a      	orrs	r2, r1
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	4bbf      	ldr	r3, [pc, #764]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	4bbe      	ldr	r3, [pc, #760]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 8003804:	4bbb      	ldr	r3, [pc, #748]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	4bba      	ldr	r3, [pc, #744]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800380a:	2101      	movs	r1, #1
 800380c:	438a      	bics	r2, r1
 800380e:	621a      	str	r2, [r3, #32]
 8003810:	4bb8      	ldr	r3, [pc, #736]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	4bb7      	ldr	r3, [pc, #732]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003816:	2104      	movs	r1, #4
 8003818:	438a      	bics	r2, r1
 800381a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d014      	beq.n	800384e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7ff f980 	bl	8002b28 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e009      	b.n	8003842 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7ff f97b 	bl	8002b28 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4aaf      	ldr	r2, [pc, #700]	; (8003af8 <HAL_RCC_OscConfig+0x680>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e19a      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4bac      	ldr	r3, [pc, #688]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	2202      	movs	r2, #2
 8003848:	4013      	ands	r3, r2
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x3b6>
 800384c:	e013      	b.n	8003876 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7ff f96b 	bl	8002b28 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7ff f966 	bl	8002b28 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	4aa5      	ldr	r2, [pc, #660]	; (8003af8 <HAL_RCC_OscConfig+0x680>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e185      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	2202      	movs	r2, #2
 8003872:	4013      	ands	r3, r2
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b9c      	ldr	r3, [pc, #624]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	4b9b      	ldr	r3, [pc, #620]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003886:	499d      	ldr	r1, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x684>)
 8003888:	400a      	ands	r2, r1
 800388a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	4013      	ands	r3, r2
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12a      	bne.n	80038f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800389e:	4b95      	ldr	r3, [pc, #596]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a2:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038a4:	2104      	movs	r1, #4
 80038a6:	430a      	orrs	r2, r1
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80038aa:	4b92      	ldr	r3, [pc, #584]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ae:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7ff f937 	bl	8002b28 <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038c0:	f7ff f932 	bl	8002b28 <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e152      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d0f1      	beq.n	80038c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038dc:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	22f8      	movs	r2, #248	; 0xf8
 80038e2:	4393      	bics	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	00da      	lsls	r2, r3, #3
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
 80038f2:	e034      	b.n	800395e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	3305      	adds	r3, #5
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003900:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003902:	2104      	movs	r1, #4
 8003904:	438a      	bics	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003908:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	22f8      	movs	r2, #248	; 0xf8
 800390e:	4393      	bics	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800391a:	430a      	orrs	r2, r1
 800391c:	635a      	str	r2, [r3, #52]	; 0x34
 800391e:	e01e      	b.n	800395e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003920:	4b74      	ldr	r3, [pc, #464]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003926:	2104      	movs	r1, #4
 8003928:	430a      	orrs	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800392c:	4b71      	ldr	r3, [pc, #452]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800392e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003932:	2101      	movs	r1, #1
 8003934:	438a      	bics	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7ff f8f6 	bl	8002b28 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003942:	f7ff f8f1 	bl	8002b28 <HAL_GetTick>
 8003946:	0002      	movs	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e111      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003954:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	2202      	movs	r2, #2
 800395a:	4013      	ands	r3, r2
 800395c:	d1f1      	bne.n	8003942 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	d05c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	220c      	movs	r2, #12
 800396e:	4013      	ands	r3, r2
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d00e      	beq.n	8003992 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003974:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	220c      	movs	r2, #12
 800397a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800397c:	2b08      	cmp	r3, #8
 800397e:	d114      	bne.n	80039aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003980:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	401a      	ands	r2, r3
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	429a      	cmp	r2, r3
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003992:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	4013      	ands	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_RCC_OscConfig+0x5a8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d03c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0e6      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01b      	beq.n	80039ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	0249      	lsls	r1, r1, #9
 80039bc:	430a      	orrs	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7ff f8b2 	bl	8002b28 <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ca:	f7ff f8ad 	bl	8002b28 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0cd      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	4013      	ands	r3, r2
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x552>
 80039e8:	e01b      	b.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80039ea:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039f0:	4943      	ldr	r1, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x688>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7ff f897 	bl	8002b28 <HAL_GetTick>
 80039fa:	0003      	movs	r3, r0
 80039fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7ff f892 	bl	8002b28 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0b2      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x588>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_RCC_OscConfig+0x5b4>
 8003a2a:	e0a4      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	220c      	movs	r2, #12
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d100      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5c2>
 8003a38:	e078      	b.n	8003b2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d14c      	bne.n	8003adc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a48:	492e      	ldr	r1, [pc, #184]	; (8003b04 <HAL_RCC_OscConfig+0x68c>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7ff f86b 	bl	8002b28 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7ff f866 	bl	8002b28 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e086      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	049b      	lsls	r3, r3, #18
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_RCC_OscConfig+0x690>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	0449      	lsls	r1, r1, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7ff f839 	bl	8002b28 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7ff f834 	bl	8002b28 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e054      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x644>
 8003ada:	e04c      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <HAL_RCC_OscConfig+0x68c>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7ff f81e 	bl	8002b28 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x6a6>
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000
 8003af8:	00001388 	.word	0x00001388
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	fffeffff 	.word	0xfffeffff
 8003b04:	feffffff 	.word	0xfeffffff
 8003b08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7ff f80c 	bl	8002b28 <HAL_GetTick>
 8003b10:	0002      	movs	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e02c      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	049b      	lsls	r3, r3, #18
 8003b26:	4013      	ands	r3, r2
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x694>
 8003b2a:	e024      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01f      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	23c0      	movs	r3, #192	; 0xc0
 8003b48:	025b      	lsls	r3, r3, #9
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	220f      	movs	r2, #15
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	23f0      	movs	r3, #240	; 0xf0
 8003b66:	039b      	lsls	r3, r3, #14
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b008      	add	sp, #32
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0bf      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d911      	bls.n	8003bca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4393      	bics	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0a6      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d006      	beq.n	8003bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003be4:	21e0      	movs	r1, #224	; 0xe0
 8003be6:	00c9      	lsls	r1, r1, #3
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	22f0      	movs	r2, #240	; 0xf0
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4013      	ands	r3, r2
 8003c08:	d04c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d120      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07a      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	049b      	lsls	r3, r3, #18
 8003c32:	4013      	ands	r3, r2
 8003c34:	d114      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06e      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e062      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e05b      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4393      	bics	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fe ff58 	bl	8002b28 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7e:	f7fe ff53 	bl	8002b28 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_RCC_ClockConfig+0x1a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e042      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	220c      	movs	r2, #12
 8003c98:	401a      	ands	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1ec      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d211      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4393      	bics	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e020      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_RCC_ClockConfig+0x1a8>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cf4:	f000 f820 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf8:	0001      	movs	r1, r0
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	220f      	movs	r2, #15
 8003d02:	4013      	ands	r3, r2
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x1ac>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	000a      	movs	r2, r1
 8003d0a:	40da      	lsrs	r2, r3
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1b0>)
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fe fec3 	bl	8002a9c <HAL_InitTick>
  
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	00001388 	.word	0x00001388
 8003d2c:	fffff8ff 	.word	0xfffff8ff
 8003d30:	08005e3c 	.word	0x08005e3c
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d046      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0xb8>
 8003d62:	d848      	bhi.n	8003df6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d002      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x36>
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x3c>
 8003d6c:	e043      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d70:	613b      	str	r3, [r7, #16]
      break;
 8003d72:	e043      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0c9b      	lsrs	r3, r3, #18
 8003d78:	220f      	movs	r2, #15
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	220f      	movs	r2, #15
 8003d88:	4013      	ands	r3, r2
 8003d8a:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	23c0      	movs	r3, #192	; 0xc0
 8003d94:	025b      	lsls	r3, r3, #9
 8003d96:	401a      	ands	r2, r3
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	025b      	lsls	r3, r3, #9
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	481a      	ldr	r0, [pc, #104]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003da4:	f7fc f9b8 	bl	8000118 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	001a      	movs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4353      	muls	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e01a      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	025b      	lsls	r3, r3, #9
 8003dba:	401a      	ands	r2, r3
 8003dbc:	23c0      	movs	r3, #192	; 0xc0
 8003dbe:	025b      	lsls	r3, r3, #9
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4814      	ldr	r0, [pc, #80]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003dc8:	f7fc f9a6 	bl	8000118 <__udivsi3>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	001a      	movs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4353      	muls	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ddc:	f7fc f99c 	bl	8000118 <__udivsi3>
 8003de0:	0003      	movs	r3, r0
 8003de2:	001a      	movs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4353      	muls	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	613b      	str	r3, [r7, #16]
      break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003df2:	613b      	str	r3, [r7, #16]
      break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003df8:	613b      	str	r3, [r7, #16]
      break;
 8003dfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dfc:	693b      	ldr	r3, [r7, #16]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b006      	add	sp, #24
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	007a1200 	.word	0x007a1200
 8003e10:	08005e54 	.word	0x08005e54
 8003e14:	08005e64 	.word	0x08005e64
 8003e18:	02dc6c00 	.word	0x02dc6c00

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003e34:	f7ff fff2 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e38:	0001      	movs	r1, r0
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	2207      	movs	r2, #7
 8003e42:	4013      	ands	r3, r2
 8003e44:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	40d9      	lsrs	r1, r3
 8003e4a:	000b      	movs	r3, r1
}    
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08005e4c 	.word	0x08005e4c

08003e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e042      	b.n	8003ef4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223d      	movs	r2, #61	; 0x3d
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	223c      	movs	r2, #60	; 0x3c
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7fe fc55 	bl	8002734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223d      	movs	r2, #61	; 0x3d
 8003e8e:	2102      	movs	r1, #2
 8003e90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	0010      	movs	r0, r2
 8003e9e:	f000 f901 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2246      	movs	r2, #70	; 0x46
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	223e      	movs	r2, #62	; 0x3e
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223f      	movs	r2, #63	; 0x3f
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2240      	movs	r2, #64	; 0x40
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2241      	movs	r2, #65	; 0x41
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2242      	movs	r2, #66	; 0x42
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2243      	movs	r2, #67	; 0x43
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2244      	movs	r2, #68	; 0x44
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2245      	movs	r2, #69	; 0x45
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223d      	movs	r2, #61	; 0x3d
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	230f      	movs	r3, #15
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	223c      	movs	r2, #60	; 0x3c
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x20>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0bc      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x19a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223c      	movs	r2, #60	; 0x3c
 8003f20:	2101      	movs	r1, #1
 8003f22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	223d      	movs	r2, #61	; 0x3d
 8003f28:	2102      	movs	r1, #2
 8003f2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2277      	movs	r2, #119	; 0x77
 8003f38:	4393      	bics	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4a58      	ldr	r2, [pc, #352]	; (80040a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2280      	movs	r2, #128	; 0x80
 8003f52:	0192      	lsls	r2, r2, #6
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xde>
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	0192      	lsls	r2, r2, #6
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d900      	bls.n	8003f62 <HAL_TIM_ConfigClockSource+0x66>
 8003f60:	e088      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0152      	lsls	r2, r2, #5
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d100      	bne.n	8003f6c <HAL_TIM_ConfigClockSource+0x70>
 8003f6a:	e088      	b.n	800407e <HAL_TIM_ConfigClockSource+0x182>
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0152      	lsls	r2, r2, #5
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d900      	bls.n	8003f76 <HAL_TIM_ConfigClockSource+0x7a>
 8003f74:	e07e      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f76:	2b70      	cmp	r3, #112	; 0x70
 8003f78:	d018      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0xb0>
 8003f7a:	d900      	bls.n	8003f7e <HAL_TIM_ConfigClockSource+0x82>
 8003f7c:	e07a      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f7e:	2b60      	cmp	r3, #96	; 0x60
 8003f80:	d04f      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x126>
 8003f82:	d900      	bls.n	8003f86 <HAL_TIM_ConfigClockSource+0x8a>
 8003f84:	e076      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f86:	2b50      	cmp	r3, #80	; 0x50
 8003f88:	d03b      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x106>
 8003f8a:	d900      	bls.n	8003f8e <HAL_TIM_ConfigClockSource+0x92>
 8003f8c:	e072      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d057      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x146>
 8003f92:	d900      	bls.n	8003f96 <HAL_TIM_ConfigClockSource+0x9a>
 8003f94:	e06e      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d063      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x166>
 8003f9a:	d86b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d060      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x166>
 8003fa0:	d868      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d05d      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x166>
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d05b      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x166>
 8003faa:	e063      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6899      	ldr	r1, [r3, #8]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f000 f962 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2277      	movs	r2, #119	; 0x77
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	609a      	str	r2, [r3, #8]
      break;
 8003fd8:	e052      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f000 f94b 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	01c9      	lsls	r1, r1, #7
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
      break;
 8004000:	e03e      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	001a      	movs	r2, r3
 8004010:	f000 f8be 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2150      	movs	r1, #80	; 0x50
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f918 	bl	8004250 <TIM_ITRx_SetConfig>
      break;
 8004020:	e02e      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	001a      	movs	r2, r3
 8004030:	f000 f8dc 	bl	80041ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2160      	movs	r1, #96	; 0x60
 800403a:	0018      	movs	r0, r3
 800403c:	f000 f908 	bl	8004250 <TIM_ITRx_SetConfig>
      break;
 8004040:	e01e      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	001a      	movs	r2, r3
 8004050:	f000 f89e 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	0018      	movs	r0, r3
 800405c:	f000 f8f8 	bl	8004250 <TIM_ITRx_SetConfig>
      break;
 8004060:	e00e      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	0019      	movs	r1, r3
 800406c:	0010      	movs	r0, r2
 800406e:	f000 f8ef 	bl	8004250 <TIM_ITRx_SetConfig>
      break;
 8004072:	e005      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004074:	230f      	movs	r3, #15
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
      break;
 800407c:	e000      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800407e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	223d      	movs	r2, #61	; 0x3d
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	223c      	movs	r2, #60	; 0x3c
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

  return status;
 8004090:	230f      	movs	r3, #15
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	ffff00ff 	.word	0xffff00ff

080040a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a30      	ldr	r2, [pc, #192]	; (8004178 <TIM_Base_SetConfig+0xd4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d008      	beq.n	80040ce <TIM_Base_SetConfig+0x2a>
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0x2a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2c      	ldr	r2, [pc, #176]	; (800417c <TIM_Base_SetConfig+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2270      	movs	r2, #112	; 0x70
 80040d2:	4393      	bics	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <TIM_Base_SetConfig+0xd4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d014      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	05db      	lsls	r3, r3, #23
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <TIM_Base_SetConfig+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <TIM_Base_SetConfig+0xdc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <TIM_Base_SetConfig+0xe0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x6e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <TIM_Base_SetConfig+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <TIM_Base_SetConfig+0xe8>)
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	4393      	bics	r3, r2
 800412a:	001a      	movs	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <TIM_Base_SetConfig+0xd4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0xbe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <TIM_Base_SetConfig+0xe0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0xbe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <TIM_Base_SetConfig+0xe4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d103      	bne.n	800416a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	615a      	str	r2, [r3, #20]
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b004      	add	sp, #16
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40002000 	.word	0x40002000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	fffffcff 	.word	0xfffffcff

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2201      	movs	r2, #1
 80041a8:	4393      	bics	r3, r2
 80041aa:	001a      	movs	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	22f0      	movs	r2, #240	; 0xf0
 80041ba:	4393      	bics	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	220a      	movs	r2, #10
 80041cc:	4393      	bics	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}

080041ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2210      	movs	r2, #16
 80041fe:	4393      	bics	r3, r2
 8004200:	001a      	movs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <TIM_TI2_ConfigInputStage+0x60>)
 8004216:	4013      	ands	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	22a0      	movs	r2, #160	; 0xa0
 8004228:	4393      	bics	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b006      	add	sp, #24
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	ffff0fff 	.word	0xffff0fff

08004250 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2270      	movs	r2, #112	; 0x70
 8004264:	4393      	bics	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	2207      	movs	r2, #7
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <TIM_ETR_SetConfig+0x3c>)
 800429c:	4013      	ands	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b006      	add	sp, #24
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	ffff00ff 	.word	0xffff00ff

080042c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	223c      	movs	r2, #60	; 0x3c
 80042d2:	5c9b      	ldrb	r3, [r3, r2]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e042      	b.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	223c      	movs	r2, #60	; 0x3c
 80042e0:	2101      	movs	r1, #1
 80042e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	223d      	movs	r2, #61	; 0x3d
 80042e8:	2102      	movs	r1, #2
 80042ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2270      	movs	r2, #112	; 0x70
 8004300:	4393      	bics	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00a      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	05db      	lsls	r3, r3, #23
 8004328:	429a      	cmp	r2, r3
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10c      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	4393      	bics	r3, r2
 800433c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4313      	orrs	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	223d      	movs	r2, #61	; 0x3d
 8004354:	2101      	movs	r1, #1
 8004356:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	223c      	movs	r2, #60	; 0x3c
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40000400 	.word	0x40000400

08004374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e044      	b.n	8004410 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d107      	bne.n	800439e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2278      	movs	r2, #120	; 0x78
 8004392:	2100      	movs	r1, #0
 8004394:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f7fe f9e7 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2224      	movs	r2, #36	; 0x24
 80043a2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2101      	movs	r1, #1
 80043b0:	438a      	bics	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 fc1c 	bl	8004bf4 <UART_SetConfig>
 80043bc:	0003      	movs	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e024      	b.n	8004410 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 fd4f 	bl	8004e74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	490d      	ldr	r1, [pc, #52]	; (8004418 <HAL_UART_Init+0xa4>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	212a      	movs	r1, #42	; 0x2a
 80043f2:	438a      	bics	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2101      	movs	r1, #1
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 fde7 	bl	8004fdc <UART_CheckIdleState>
 800440e:	0003      	movs	r3, r0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	ffffb7ff 	.word	0xffffb7ff

0800441c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442e:	2b20      	cmp	r3, #32
 8004430:	d000      	beq.n	8004434 <HAL_UART_Transmit_DMA+0x18>
 8004432:	e077      	b.n	8004524 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_UART_Transmit_DMA+0x26>
 800443a:	1dbb      	adds	r3, r7, #6
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06f      	b.n	8004526 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	015b      	lsls	r3, r3, #5
 800444e:	429a      	cmp	r2, r3
 8004450:	d109      	bne.n	8004466 <HAL_UART_Transmit_DMA+0x4a>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2201      	movs	r2, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d001      	beq.n	8004466 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e05f      	b.n	8004526 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1dba      	adds	r2, r7, #6
 8004470:	2150      	movs	r1, #80	; 0x50
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1dba      	adds	r2, r7, #6
 800447a:	2152      	movs	r1, #82	; 0x52
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2284      	movs	r2, #132	; 0x84
 8004484:	2100      	movs	r1, #0
 8004486:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	2b00      	cmp	r3, #0
 8004494:	d027      	beq.n	80044e6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a25      	ldr	r2, [pc, #148]	; (8004530 <HAL_UART_Transmit_DMA+0x114>)
 800449c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_UART_Transmit_DMA+0x118>)
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a23      	ldr	r2, [pc, #140]	; (8004538 <HAL_UART_Transmit_DMA+0x11c>)
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	2200      	movs	r2, #0
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	0019      	movs	r1, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3328      	adds	r3, #40	; 0x28
 80044c6:	001a      	movs	r2, r3
 80044c8:	1dbb      	adds	r3, r7, #6
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	f7fe fc80 	bl	8002dd0 <HAL_DMA_Start_IT>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2284      	movs	r2, #132	; 0x84
 80044d8:	2110      	movs	r1, #16
 80044da:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e01f      	b.n	8004526 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	613b      	str	r3, [r7, #16]
  return(result);
 80044f4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b008      	add	sp, #32
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	08005451 	.word	0x08005451
 8004534:	080054e5 	.word	0x080054e5
 8004538:	08005673 	.word	0x08005673

0800453c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	1dbb      	adds	r3, r7, #6
 8004548:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	589b      	ldr	r3, [r3, r2]
 8004550:	2b20      	cmp	r3, #32
 8004552:	d145      	bne.n	80045e0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_UART_Receive_DMA+0x26>
 800455a:	1dbb      	adds	r3, r7, #6
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e03d      	b.n	80045e2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	429a      	cmp	r2, r3
 8004570:	d109      	bne.n	8004586 <HAL_UART_Receive_DMA+0x4a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d001      	beq.n	8004586 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e02d      	b.n	80045e2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	4013      	ands	r3, r2
 8004598:	d019      	beq.n	80045ce <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459a:	f3ef 8310 	mrs	r3, PRIMASK
 800459e:	613b      	str	r3, [r7, #16]
  return(result);
 80045a0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	2301      	movs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f383 8810 	msr	PRIMASK, r3
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	04c9      	lsls	r1, r1, #19
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	881a      	ldrh	r2, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 fe12 	bl	8005200 <UART_Start_Receive_DMA>
 80045dc:	0003      	movs	r3, r0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b008      	add	sp, #32
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b0ab      	sub	sp, #172	; 0xac
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	22a4      	movs	r2, #164	; 0xa4
 80045fc:	18b9      	adds	r1, r7, r2
 80045fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	20a0      	movs	r0, #160	; 0xa0
 8004608:	1839      	adds	r1, r7, r0
 800460a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	219c      	movs	r1, #156	; 0x9c
 8004614:	1879      	adds	r1, r7, r1
 8004616:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004618:	0011      	movs	r1, r2
 800461a:	18bb      	adds	r3, r7, r2
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a99      	ldr	r2, [pc, #612]	; (8004884 <HAL_UART_IRQHandler+0x298>)
 8004620:	4013      	ands	r3, r2
 8004622:	2298      	movs	r2, #152	; 0x98
 8004624:	18bc      	adds	r4, r7, r2
 8004626:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004628:	18bb      	adds	r3, r7, r2
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d114      	bne.n	800465a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004630:	187b      	adds	r3, r7, r1
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2220      	movs	r2, #32
 8004636:	4013      	ands	r3, r2
 8004638:	d00f      	beq.n	800465a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800463a:	183b      	adds	r3, r7, r0
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2220      	movs	r2, #32
 8004640:	4013      	ands	r3, r2
 8004642:	d00a      	beq.n	800465a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	2b00      	cmp	r3, #0
 800464a:	d100      	bne.n	800464e <HAL_UART_IRQHandler+0x62>
 800464c:	e29e      	b.n	8004b8c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	0010      	movs	r0, r2
 8004656:	4798      	blx	r3
      }
      return;
 8004658:	e298      	b.n	8004b8c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800465a:	2398      	movs	r3, #152	; 0x98
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d100      	bne.n	8004666 <HAL_UART_IRQHandler+0x7a>
 8004664:	e114      	b.n	8004890 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004666:	239c      	movs	r3, #156	; 0x9c
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	4013      	ands	r3, r2
 8004670:	d106      	bne.n	8004680 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004672:	23a0      	movs	r3, #160	; 0xa0
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a83      	ldr	r2, [pc, #524]	; (8004888 <HAL_UART_IRQHandler+0x29c>)
 800467a:	4013      	ands	r3, r2
 800467c:	d100      	bne.n	8004680 <HAL_UART_IRQHandler+0x94>
 800467e:	e107      	b.n	8004890 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004680:	23a4      	movs	r3, #164	; 0xa4
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d012      	beq.n	80046b2 <HAL_UART_IRQHandler+0xc6>
 800468c:	23a0      	movs	r3, #160	; 0xa0
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4013      	ands	r3, r2
 8004698:	d00b      	beq.n	80046b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2284      	movs	r2, #132	; 0x84
 80046a6:	589b      	ldr	r3, [r3, r2]
 80046a8:	2201      	movs	r2, #1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2184      	movs	r1, #132	; 0x84
 80046b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b2:	23a4      	movs	r3, #164	; 0xa4
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2202      	movs	r2, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
 80046be:	239c      	movs	r3, #156	; 0x9c
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2202      	movs	r2, #2
 80046d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2284      	movs	r2, #132	; 0x84
 80046d6:	589b      	ldr	r3, [r3, r2]
 80046d8:	2204      	movs	r2, #4
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2184      	movs	r1, #132	; 0x84
 80046e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e2:	23a4      	movs	r3, #164	; 0xa4
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2204      	movs	r2, #4
 80046ea:	4013      	ands	r3, r2
 80046ec:	d011      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
 80046ee:	239c      	movs	r3, #156	; 0x9c
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d00b      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2204      	movs	r2, #4
 8004700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2284      	movs	r2, #132	; 0x84
 8004706:	589b      	ldr	r3, [r3, r2]
 8004708:	2202      	movs	r2, #2
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2184      	movs	r1, #132	; 0x84
 8004710:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004712:	23a4      	movs	r3, #164	; 0xa4
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	4013      	ands	r3, r2
 800471c:	d017      	beq.n	800474e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800471e:	23a0      	movs	r3, #160	; 0xa0
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2220      	movs	r2, #32
 8004726:	4013      	ands	r3, r2
 8004728:	d105      	bne.n	8004736 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800472a:	239c      	movs	r3, #156	; 0x9c
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004734:	d00b      	beq.n	800474e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2284      	movs	r2, #132	; 0x84
 8004742:	589b      	ldr	r3, [r3, r2]
 8004744:	2208      	movs	r2, #8
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2184      	movs	r1, #132	; 0x84
 800474c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800474e:	23a4      	movs	r3, #164	; 0xa4
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4013      	ands	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_UART_IRQHandler+0x198>
 800475c:	23a0      	movs	r3, #160	; 0xa0
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	04db      	lsls	r3, r3, #19
 8004766:	4013      	ands	r3, r2
 8004768:	d00c      	beq.n	8004784 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2284      	movs	r2, #132	; 0x84
 8004778:	589b      	ldr	r3, [r3, r2]
 800477a:	2220      	movs	r2, #32
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2184      	movs	r1, #132	; 0x84
 8004782:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2284      	movs	r2, #132	; 0x84
 8004788:	589b      	ldr	r3, [r3, r2]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d100      	bne.n	8004790 <HAL_UART_IRQHandler+0x1a4>
 800478e:	e1ff      	b.n	8004b90 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004790:	23a4      	movs	r3, #164	; 0xa4
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2220      	movs	r2, #32
 8004798:	4013      	ands	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800479c:	23a0      	movs	r3, #160	; 0xa0
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2220      	movs	r2, #32
 80047a4:	4013      	ands	r3, r2
 80047a6:	d008      	beq.n	80047ba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	0010      	movs	r0, r2
 80047b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2284      	movs	r2, #132	; 0x84
 80047be:	589b      	ldr	r3, [r3, r2]
 80047c0:	2194      	movs	r1, #148	; 0x94
 80047c2:	187a      	adds	r2, r7, r1
 80047c4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d004      	beq.n	80047de <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2228      	movs	r2, #40	; 0x28
 80047da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047dc:	d047      	beq.n	800486e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fdd1 	bl	8005388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d137      	bne.n	8004864 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f4:	f3ef 8310 	mrs	r3, PRIMASK
 80047f8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80047fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fc:	2090      	movs	r0, #144	; 0x90
 80047fe:	183a      	adds	r2, r7, r0
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	2301      	movs	r3, #1
 8004804:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	438a      	bics	r2, r1
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	183b      	adds	r3, r7, r0
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <HAL_UART_IRQHandler+0x2a0>)
 800483a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	0018      	movs	r0, r3
 8004842:	f7fe fb63 	bl	8002f0c <HAL_DMA_Abort_IT>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d01a      	beq.n	8004880 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004854:	0018      	movs	r0, r3
 8004856:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e012      	b.n	8004880 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 f9b5 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004862:	e00d      	b.n	8004880 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f000 f9b0 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	e008      	b.n	8004880 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 f9ab 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2284      	movs	r2, #132	; 0x84
 800487a:	2100      	movs	r1, #0
 800487c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800487e:	e187      	b.n	8004b90 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	46c0      	nop			; (mov r8, r8)
    return;
 8004882:	e185      	b.n	8004b90 <HAL_UART_IRQHandler+0x5a4>
 8004884:	0000080f 	.word	0x0000080f
 8004888:	04000120 	.word	0x04000120
 800488c:	080056f7 	.word	0x080056f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004894:	2b01      	cmp	r3, #1
 8004896:	d000      	beq.n	800489a <HAL_UART_IRQHandler+0x2ae>
 8004898:	e139      	b.n	8004b0e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800489a:	23a4      	movs	r3, #164	; 0xa4
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d100      	bne.n	80048a8 <HAL_UART_IRQHandler+0x2bc>
 80048a6:	e132      	b.n	8004b0e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048a8:	23a0      	movs	r3, #160	; 0xa0
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	4013      	ands	r3, r2
 80048b2:	d100      	bne.n	80048b6 <HAL_UART_IRQHandler+0x2ca>
 80048b4:	e12b      	b.n	8004b0e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2210      	movs	r2, #16
 80048bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2240      	movs	r2, #64	; 0x40
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d000      	beq.n	80048ce <HAL_UART_IRQHandler+0x2e2>
 80048cc:	e09f      	b.n	8004a0e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	217e      	movs	r1, #126	; 0x7e
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d100      	bne.n	80048e6 <HAL_UART_IRQHandler+0x2fa>
 80048e4:	e156      	b.n	8004b94 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2258      	movs	r2, #88	; 0x58
 80048ea:	5a9b      	ldrh	r3, [r3, r2]
 80048ec:	187a      	adds	r2, r7, r1
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d300      	bcc.n	80048f6 <HAL_UART_IRQHandler+0x30a>
 80048f4:	e14e      	b.n	8004b94 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	187a      	adds	r2, r7, r1
 80048fa:	215a      	movs	r1, #90	; 0x5a
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d06f      	beq.n	80049ea <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004912:	67bb      	str	r3, [r7, #120]	; 0x78
 8004914:	2301      	movs	r3, #1
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	499e      	ldr	r1, [pc, #632]	; (8004ba4 <HAL_UART_IRQHandler+0x5b8>)
 800492c:	400a      	ands	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	f383 8810 	msr	PRIMASK, r3
}
 800493a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493c:	f3ef 8310 	mrs	r3, PRIMASK
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	677b      	str	r3, [r7, #116]	; 0x74
 8004946:	2301      	movs	r3, #1
 8004948:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004968:	f383 8810 	msr	PRIMASK, r3
}
 800496c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496e:	f3ef 8310 	mrs	r3, PRIMASK
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	673b      	str	r3, [r7, #112]	; 0x70
 8004978:	2301      	movs	r3, #1
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2140      	movs	r1, #64	; 0x40
 8004990:	438a      	bics	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499a:	f383 8810 	msr	PRIMASK, r3
}
 800499e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	2120      	movs	r1, #32
 80049a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b8:	2301      	movs	r3, #1
 80049ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2110      	movs	r1, #16
 80049d0:	438a      	bics	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fe fa59 	bl	8002e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2258      	movs	r2, #88	; 0x58
 80049f4:	5a9a      	ldrh	r2, [r3, r2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	215a      	movs	r1, #90	; 0x5a
 80049fa:	5a5b      	ldrh	r3, [r3, r1]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f8e8 	bl	8004bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a0c:	e0c2      	b.n	8004b94 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2258      	movs	r2, #88	; 0x58
 8004a12:	5a99      	ldrh	r1, [r3, r2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	225a      	movs	r2, #90	; 0x5a
 8004a18:	5a9b      	ldrh	r3, [r3, r2]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	208e      	movs	r0, #142	; 0x8e
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	1a8a      	subs	r2, r1, r2
 8004a22:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	225a      	movs	r2, #90	; 0x5a
 8004a28:	5a9b      	ldrh	r3, [r3, r2]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d100      	bne.n	8004a32 <HAL_UART_IRQHandler+0x446>
 8004a30:	e0b2      	b.n	8004b98 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004a32:	183b      	adds	r3, r7, r0
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d100      	bne.n	8004a3c <HAL_UART_IRQHandler+0x450>
 8004a3a:	e0ad      	b.n	8004b98 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a42:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	2488      	movs	r4, #136	; 0x88
 8004a46:	193a      	adds	r2, r7, r4
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4951      	ldr	r1, [pc, #324]	; (8004ba8 <HAL_UART_IRQHandler+0x5bc>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a74:	f3ef 8310 	mrs	r3, PRIMASK
 8004a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	2484      	movs	r4, #132	; 0x84
 8004a7e:	193a      	adds	r2, r7, r4
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	438a      	bics	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	193b      	adds	r3, r7, r4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	2120      	movs	r1, #32
 8004ab2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	2480      	movs	r4, #128	; 0x80
 8004aca:	193a      	adds	r2, r7, r4
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	2301      	movs	r3, #1
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2110      	movs	r1, #16
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	193b      	adds	r3, r7, r4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0011      	movs	r1, r2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f868 	bl	8004bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b0c:	e044      	b.n	8004b98 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b0e:	23a4      	movs	r3, #164	; 0xa4
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	035b      	lsls	r3, r3, #13
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d010      	beq.n	8004b3e <HAL_UART_IRQHandler+0x552>
 8004b1c:	239c      	movs	r3, #156	; 0x9c
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	03db      	lsls	r3, r3, #15
 8004b26:	4013      	ands	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	0352      	lsls	r2, r2, #13
 8004b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fe1f 	bl	800577a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b3c:	e02f      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b3e:	23a4      	movs	r3, #164	; 0xa4
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	4013      	ands	r3, r2
 8004b48:	d00f      	beq.n	8004b6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b4a:	23a0      	movs	r3, #160	; 0xa0
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2280      	movs	r2, #128	; 0x80
 8004b52:	4013      	ands	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01e      	beq.n	8004b9c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	0010      	movs	r0, r2
 8004b66:	4798      	blx	r3
    }
    return;
 8004b68:	e018      	b.n	8004b9c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b6a:	23a4      	movs	r3, #164	; 0xa4
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	4013      	ands	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
 8004b76:	23a0      	movs	r3, #160	; 0xa0
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2240      	movs	r2, #64	; 0x40
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d00d      	beq.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 fdcd 	bl	8005724 <UART_EndTransmit_IT>
    return;
 8004b8a:	e008      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	e006      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	e004      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	e002      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004b9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b02b      	add	sp, #172	; 0xac
 8004ba2:	bd90      	pop	{r4, r7, pc}
 8004ba4:	fffffeff 	.word	0xfffffeff
 8004ba8:	fffffedf 	.word	0xfffffedf

08004bac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	000a      	movs	r2, r1
 8004be6:	1cbb      	adds	r3, r7, #2
 8004be8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bfc:	231e      	movs	r3, #30
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a8d      	ldr	r2, [pc, #564]	; (8004e58 <UART_SetConfig+0x264>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a88      	ldr	r2, [pc, #544]	; (8004e5c <UART_SetConfig+0x268>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a7f      	ldr	r2, [pc, #508]	; (8004e60 <UART_SetConfig+0x26c>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7b      	ldr	r2, [pc, #492]	; (8004e64 <UART_SetConfig+0x270>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d127      	bne.n	8004cca <UART_SetConfig+0xd6>
 8004c7a:	4b7b      	ldr	r3, [pc, #492]	; (8004e68 <UART_SetConfig+0x274>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	2203      	movs	r2, #3
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d00d      	beq.n	8004ca2 <UART_SetConfig+0xae>
 8004c86:	d81b      	bhi.n	8004cc0 <UART_SetConfig+0xcc>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d014      	beq.n	8004cb6 <UART_SetConfig+0xc2>
 8004c8c:	d818      	bhi.n	8004cc0 <UART_SetConfig+0xcc>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <UART_SetConfig+0xa4>
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d00a      	beq.n	8004cac <UART_SetConfig+0xb8>
 8004c96:	e013      	b.n	8004cc0 <UART_SetConfig+0xcc>
 8004c98:	231f      	movs	r3, #31
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e021      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004ca2:	231f      	movs	r3, #31
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e01c      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004cac:	231f      	movs	r3, #31
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e017      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2208      	movs	r2, #8
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e012      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004cc0:	231f      	movs	r3, #31
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e00d      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a67      	ldr	r2, [pc, #412]	; (8004e6c <UART_SetConfig+0x278>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d104      	bne.n	8004cde <UART_SetConfig+0xea>
 8004cd4:	231f      	movs	r3, #31
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e003      	b.n	8004ce6 <UART_SetConfig+0xf2>
 8004cde:	231f      	movs	r3, #31
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d15c      	bne.n	8004dac <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d015      	beq.n	8004d28 <UART_SetConfig+0x134>
 8004cfc:	dc18      	bgt.n	8004d30 <UART_SetConfig+0x13c>
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d00d      	beq.n	8004d1e <UART_SetConfig+0x12a>
 8004d02:	dc15      	bgt.n	8004d30 <UART_SetConfig+0x13c>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <UART_SetConfig+0x11a>
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d005      	beq.n	8004d18 <UART_SetConfig+0x124>
 8004d0c:	e010      	b.n	8004d30 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0e:	f7ff f88f 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004d12:	0003      	movs	r3, r0
 8004d14:	61bb      	str	r3, [r7, #24]
        break;
 8004d16:	e012      	b.n	8004d3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d18:	4b55      	ldr	r3, [pc, #340]	; (8004e70 <UART_SetConfig+0x27c>)
 8004d1a:	61bb      	str	r3, [r7, #24]
        break;
 8004d1c:	e00f      	b.n	8004d3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1e:	f7ff f80b 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8004d22:	0003      	movs	r3, r0
 8004d24:	61bb      	str	r3, [r7, #24]
        break;
 8004d26:	e00a      	b.n	8004d3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	61bb      	str	r3, [r7, #24]
        break;
 8004d2e:	e006      	b.n	8004d3e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d34:	231e      	movs	r3, #30
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
        break;
 8004d3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d100      	bne.n	8004d46 <UART_SetConfig+0x152>
 8004d44:	e07a      	b.n	8004e3c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	005a      	lsls	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	18d2      	adds	r2, r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	0019      	movs	r1, r3
 8004d58:	0010      	movs	r0, r2
 8004d5a:	f7fb f9dd 	bl	8000118 <__udivsi3>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d91c      	bls.n	8004da2 <UART_SetConfig+0x1ae>
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d217      	bcs.n	8004da2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	200e      	movs	r0, #14
 8004d78:	183b      	adds	r3, r7, r0
 8004d7a:	210f      	movs	r1, #15
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2207      	movs	r2, #7
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b299      	uxth	r1, r3
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	183a      	adds	r2, r7, r0
 8004d90:	8812      	ldrh	r2, [r2, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	183a      	adds	r2, r7, r0
 8004d9c:	8812      	ldrh	r2, [r2, #0]
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e04c      	b.n	8004e3c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004da2:	231e      	movs	r3, #30
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e047      	b.n	8004e3c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dac:	231f      	movs	r3, #31
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d015      	beq.n	8004de2 <UART_SetConfig+0x1ee>
 8004db6:	dc18      	bgt.n	8004dea <UART_SetConfig+0x1f6>
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d00d      	beq.n	8004dd8 <UART_SetConfig+0x1e4>
 8004dbc:	dc15      	bgt.n	8004dea <UART_SetConfig+0x1f6>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <UART_SetConfig+0x1d4>
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d005      	beq.n	8004dd2 <UART_SetConfig+0x1de>
 8004dc6:	e010      	b.n	8004dea <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7ff f832 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	61bb      	str	r3, [r7, #24]
        break;
 8004dd0:	e012      	b.n	8004df8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd2:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <UART_SetConfig+0x27c>)
 8004dd4:	61bb      	str	r3, [r7, #24]
        break;
 8004dd6:	e00f      	b.n	8004df8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd8:	f7fe ffae 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	61bb      	str	r3, [r7, #24]
        break;
 8004de0:	e00a      	b.n	8004df8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	61bb      	str	r3, [r7, #24]
        break;
 8004de8:	e006      	b.n	8004df8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dee:	231e      	movs	r3, #30
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
        break;
 8004df6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01e      	beq.n	8004e3c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	085a      	lsrs	r2, r3, #1
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	18d2      	adds	r2, r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	0010      	movs	r0, r2
 8004e10:	f7fb f982 	bl	8000118 <__udivsi3>
 8004e14:	0003      	movs	r3, r0
 8004e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d90a      	bls.n	8004e34 <UART_SetConfig+0x240>
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d205      	bcs.n	8004e34 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e003      	b.n	8004e3c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e34:	231e      	movs	r3, #30
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e48:	231e      	movs	r3, #30
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b008      	add	sp, #32
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	efff69f3 	.word	0xefff69f3
 8004e5c:	ffffcfff 	.word	0xffffcfff
 8004e60:	fffff4ff 	.word	0xfffff4ff
 8004e64:	40013800 	.word	0x40013800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40004400 	.word	0x40004400
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	2201      	movs	r2, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a4a      	ldr	r2, [pc, #296]	; (8004fb8 <UART_AdvFeatureConfig+0x144>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a43      	ldr	r2, [pc, #268]	; (8004fbc <UART_AdvFeatureConfig+0x148>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d00b      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <UART_AdvFeatureConfig+0x14c>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <UART_AdvFeatureConfig+0x150>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2210      	movs	r2, #16
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <UART_AdvFeatureConfig+0x154>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <UART_AdvFeatureConfig+0x158>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <UART_AdvFeatureConfig+0x15c>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	035b      	lsls	r3, r3, #13
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d10b      	bne.n	8004f8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <UART_AdvFeatureConfig+0x160>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	4013      	ands	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <UART_AdvFeatureConfig+0x164>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	fffdffff 	.word	0xfffdffff
 8004fbc:	fffeffff 	.word	0xfffeffff
 8004fc0:	fffbffff 	.word	0xfffbffff
 8004fc4:	ffff7fff 	.word	0xffff7fff
 8004fc8:	ffffefff 	.word	0xffffefff
 8004fcc:	ffffdfff 	.word	0xffffdfff
 8004fd0:	ffefffff 	.word	0xffefffff
 8004fd4:	ff9fffff 	.word	0xff9fffff
 8004fd8:	fff7ffff 	.word	0xfff7ffff

08004fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b092      	sub	sp, #72	; 0x48
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2284      	movs	r2, #132	; 0x84
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fec:	f7fd fd9c 	bl	8002b28 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d12c      	bne.n	800505c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	0391      	lsls	r1, r2, #14
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4a46      	ldr	r2, [pc, #280]	; (8005124 <UART_CheckIdleState+0x148>)
 800500c:	9200      	str	r2, [sp, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	f000 f88c 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d021      	beq.n	800505c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8310 	mrs	r3, PRIMASK
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
 8005022:	2301      	movs	r3, #1
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	438a      	bics	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2278      	movs	r2, #120	; 0x78
 8005054:	2100      	movs	r1, #0
 8005056:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e05f      	b.n	800511c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2204      	movs	r2, #4
 8005064:	4013      	ands	r3, r2
 8005066:	2b04      	cmp	r3, #4
 8005068:	d146      	bne.n	80050f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	03d1      	lsls	r1, r2, #15
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <UART_CheckIdleState+0x148>)
 8005074:	9200      	str	r2, [sp, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f858 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d03b      	beq.n	80050f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	60fb      	str	r3, [r7, #12]
  return(result);
 8005086:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	2301      	movs	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4921      	ldr	r1, [pc, #132]	; (8005128 <UART_CheckIdleState+0x14c>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b2:	f3ef 8310 	mrs	r3, PRIMASK
 80050b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80050b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
 80050bc:	2301      	movs	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2101      	movs	r1, #1
 80050d4:	438a      	bics	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2280      	movs	r2, #128	; 0x80
 80050e8:	2120      	movs	r1, #32
 80050ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2278      	movs	r2, #120	; 0x78
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e011      	b.n	800511c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	2120      	movs	r1, #32
 8005104:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2278      	movs	r2, #120	; 0x78
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b010      	add	sp, #64	; 0x40
 8005122:	bd80      	pop	{r7, pc}
 8005124:	01ffffff 	.word	0x01ffffff
 8005128:	fffffedf 	.word	0xfffffedf

0800512c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	1dfb      	adds	r3, r7, #7
 800513a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513c:	e04b      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3301      	adds	r3, #1
 8005142:	d048      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7fd fcf0 	bl	8002b28 <HAL_GetTick>
 8005148:	0002      	movs	r2, r0
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04b      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	4013      	ands	r3, r2
 8005168:	d035      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	2208      	movs	r2, #8
 8005172:	4013      	ands	r3, r2
 8005174:	2b08      	cmp	r3, #8
 8005176:	d111      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2208      	movs	r2, #8
 800517e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f900 	bl	8005388 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2284      	movs	r2, #132	; 0x84
 800518c:	2108      	movs	r1, #8
 800518e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2278      	movs	r2, #120	; 0x78
 8005194:	2100      	movs	r1, #0
 8005196:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e02c      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	401a      	ands	r2, r3
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d112      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f8e3 	bl	8005388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2284      	movs	r2, #132	; 0x84
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2278      	movs	r2, #120	; 0x78
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e00f      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	4013      	ands	r3, r2
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	425a      	negs	r2, r3
 80051e6:	4153      	adcs	r3, r2
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	001a      	movs	r2, r3
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d0a4      	beq.n	800513e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b090      	sub	sp, #64	; 0x40
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	1dbb      	adds	r3, r7, #6
 800520c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1dba      	adds	r2, r7, #6
 8005218:	2158      	movs	r1, #88	; 0x58
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2284      	movs	r2, #132	; 0x84
 8005222:	2100      	movs	r1, #0
 8005224:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2280      	movs	r2, #128	; 0x80
 800522a:	2122      	movs	r1, #34	; 0x22
 800522c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	2b00      	cmp	r3, #0
 8005234:	d028      	beq.n	8005288 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <UART_Start_Receive_DMA+0x134>)
 800523c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005242:	4a3d      	ldr	r2, [pc, #244]	; (8005338 <UART_Start_Receive_DMA+0x138>)
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	4a3c      	ldr	r2, [pc, #240]	; (800533c <UART_Start_Receive_DMA+0x13c>)
 800524c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	2200      	movs	r2, #0
 8005254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3324      	adds	r3, #36	; 0x24
 8005260:	0019      	movs	r1, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	001a      	movs	r2, r3
 8005268:	1dbb      	adds	r3, r7, #6
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	f7fd fdb0 	bl	8002dd0 <HAL_DMA_Start_IT>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d009      	beq.n	8005288 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2284      	movs	r2, #132	; 0x84
 8005278:	2110      	movs	r1, #16
 800527a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	2120      	movs	r1, #32
 8005282:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e050      	b.n	800532a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8310 	mrs	r3, PRIMASK
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800529a:	2301      	movs	r3, #1
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	0049      	lsls	r1, r1, #1
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	f383 8810 	msr	PRIMASK, r3
}
 80052c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c4:	f3ef 8310 	mrs	r3, PRIMASK
 80052c8:	613b      	str	r3, [r7, #16]
  return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ce:	2301      	movs	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2101      	movs	r1, #1
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f383 8810 	msr	PRIMASK, r3
}
 80052f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f6:	f3ef 8310 	mrs	r3, PRIMASK
 80052fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80052fc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005300:	2301      	movs	r3, #1
 8005302:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b010      	add	sp, #64	; 0x40
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	08005505 	.word	0x08005505
 8005338:	08005631 	.word	0x08005631
 800533c:	08005673 	.word	0x08005673

08005340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	60bb      	str	r3, [r7, #8]
  return(result);
 800534e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	2301      	movs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			; (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	21c0      	movs	r1, #192	; 0xc0
 800536a:	438a      	bics	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	617b      	str	r3, [r7, #20]
  return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4926      	ldr	r1, [pc, #152]	; (800544c <UART_EndRxTransfer+0xc4>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c2:	f3ef 8310 	mrs	r3, PRIMASK
 80053c6:	623b      	str	r3, [r7, #32]
  return(result);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
 80053cc:	2301      	movs	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	f383 8810 	msr	PRIMASK, r3
}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	438a      	bics	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d118      	bne.n	800542e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005400:	60bb      	str	r3, [r7, #8]
  return(result);
 8005402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	2301      	movs	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2110      	movs	r1, #16
 800541e:	438a      	bics	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2280      	movs	r2, #128	; 0x80
 8005432:	2120      	movs	r1, #32
 8005434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b00e      	add	sp, #56	; 0x38
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	fffffedf 	.word	0xfffffedf

08005450 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	; 0x30
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b20      	cmp	r3, #32
 8005464:	d035      	beq.n	80054d2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	2252      	movs	r2, #82	; 0x52
 800546a:	2100      	movs	r1, #0
 800546c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546e:	f3ef 8310 	mrs	r3, PRIMASK
 8005472:	60fb      	str	r3, [r7, #12]
  return(result);
 8005474:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
 8005478:	2301      	movs	r3, #1
 800547a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f383 8810 	msr	PRIMASK, r3
}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2180      	movs	r1, #128	; 0x80
 8005490:	438a      	bics	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f383 8810 	msr	PRIMASK, r3
}
 800549e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a0:	f3ef 8310 	mrs	r3, PRIMASK
 80054a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80054a6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
 80054aa:	2301      	movs	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f383 8810 	msr	PRIMASK, r3
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2140      	movs	r1, #64	; 0x40
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	e004      	b.n	80054dc <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fc f9a9 	bl	800182c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b00c      	add	sp, #48	; 0x30
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7ff fb59 	bl	8004bac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b004      	add	sp, #16
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b094      	sub	sp, #80	; 0x50
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b20      	cmp	r3, #32
 8005518:	d06f      	beq.n	80055fa <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	225a      	movs	r2, #90	; 0x5a
 800551e:	2100      	movs	r1, #0
 8005520:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005522:	f3ef 8310 	mrs	r3, PRIMASK
 8005526:	61bb      	str	r3, [r7, #24]
  return(result);
 8005528:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
 800552c:	2301      	movs	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	493a      	ldr	r1, [pc, #232]	; (800562c <UART_DMAReceiveCplt+0x128>)
 8005544:	400a      	ands	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005554:	f3ef 8310 	mrs	r3, PRIMASK
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	2301      	movs	r3, #1
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2101      	movs	r1, #1
 8005576:	438a      	bics	r2, r1
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005586:	f3ef 8310 	mrs	r3, PRIMASK
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	643b      	str	r3, [r7, #64]	; 0x40
 8005590:	2301      	movs	r3, #1
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	438a      	bics	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	2120      	movs	r1, #32
 80055be:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d118      	bne.n	80055fa <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c8:	f3ef 8310 	mrs	r3, PRIMASK
 80055cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ce:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d2:	2301      	movs	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f383 8810 	msr	PRIMASK, r3
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2110      	movs	r1, #16
 80055ea:	438a      	bics	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f383 8810 	msr	PRIMASK, r3
}
 80055f8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	2200      	movs	r2, #0
 80055fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	2258      	movs	r2, #88	; 0x58
 800560c:	5a9a      	ldrh	r2, [r3, r2]
 800560e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005610:	0011      	movs	r1, r2
 8005612:	0018      	movs	r0, r3
 8005614:	f7ff fae2 	bl	8004bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005618:	e003      	b.n	8005622 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	0018      	movs	r0, r3
 800561e:	f7fc f917 	bl	8001850 <HAL_UART_RxCpltCallback>
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b014      	add	sp, #80	; 0x50
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	fffffeff 	.word	0xfffffeff

08005630 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2b01      	cmp	r3, #1
 800564a:	d10a      	bne.n	8005662 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2258      	movs	r2, #88	; 0x58
 8005650:	5a9b      	ldrh	r3, [r3, r2]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0011      	movs	r1, r2
 800565a:	0018      	movs	r0, r3
 800565c:	f7ff fabe 	bl	8004bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005660:	e003      	b.n	800566a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff faa9 	bl	8004bbc <HAL_UART_RxHalfCpltCallback>
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}

08005672 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005684:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	589b      	ldr	r3, [r3, r2]
 800568c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	4013      	ands	r3, r2
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d10a      	bne.n	80056b2 <UART_DMAError+0x40>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b21      	cmp	r3, #33	; 0x21
 80056a0:	d107      	bne.n	80056b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2252      	movs	r2, #82	; 0x52
 80056a6:	2100      	movs	r1, #0
 80056a8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7ff fe47 	bl	8005340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d10a      	bne.n	80056d6 <UART_DMAError+0x64>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b22      	cmp	r3, #34	; 0x22
 80056c4:	d107      	bne.n	80056d6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	225a      	movs	r2, #90	; 0x5a
 80056ca:	2100      	movs	r1, #0
 80056cc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7ff fe59 	bl	8005388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2284      	movs	r2, #132	; 0x84
 80056da:	589b      	ldr	r3, [r3, r2]
 80056dc:	2210      	movs	r2, #16
 80056de:	431a      	orrs	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2184      	movs	r1, #132	; 0x84
 80056e4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fa6f 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b006      	add	sp, #24
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	225a      	movs	r2, #90	; 0x5a
 8005708:	2100      	movs	r1, #0
 800570a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2252      	movs	r2, #82	; 0x52
 8005710:	2100      	movs	r1, #0
 8005712:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0018      	movs	r0, r3
 8005718:	f7ff fa58 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b004      	add	sp, #16
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800572c:	f3ef 8310 	mrs	r3, PRIMASK
 8005730:	60bb      	str	r3, [r7, #8]
  return(result);
 8005732:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	2301      	movs	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	438a      	bics	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f383 8810 	msr	PRIMASK, r3
}
 800575c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f7fc f85d 	bl	800182c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	46bd      	mov	sp, r7
 8005776:	b006      	add	sp, #24
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b002      	add	sp, #8
 8005788:	bd80      	pop	{r7, pc}

0800578a <__cxa_pure_virtual>:
 800578a:	b510      	push	{r4, lr}
 800578c:	f000 f804 	bl	8005798 <_ZSt9terminatev>

08005790 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005790:	b510      	push	{r4, lr}
 8005792:	4780      	blx	r0
 8005794:	f000 f808 	bl	80057a8 <abort>

08005798 <_ZSt9terminatev>:
 8005798:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <_ZSt9terminatev+0xc>)
 800579a:	b510      	push	{r4, lr}
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f7ff fff7 	bl	8005790 <_ZN10__cxxabiv111__terminateEPFvvE>
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <abort>:
 80057a8:	2006      	movs	r0, #6
 80057aa:	b510      	push	{r4, lr}
 80057ac:	f000 f874 	bl	8005898 <raise>
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fd f8d5 	bl	8002960 <_exit>
	...

080057b8 <__errno>:
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <__errno+0x8>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	4770      	bx	lr
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	20000010 	.word	0x20000010

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	2600      	movs	r6, #0
 80057c8:	4d0c      	ldr	r5, [pc, #48]	; (80057fc <__libc_init_array+0x38>)
 80057ca:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	2600      	movs	r6, #0
 80057d6:	f000 f9bd 	bl	8005b54 <_init>
 80057da:	4d0a      	ldr	r5, [pc, #40]	; (8005804 <__libc_init_array+0x40>)
 80057dc:	4c0a      	ldr	r4, [pc, #40]	; (8005808 <__libc_init_array+0x44>)
 80057de:	1b64      	subs	r4, r4, r5
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	00b3      	lsls	r3, r6, #2
 80057ea:	58eb      	ldr	r3, [r5, r3]
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	00b3      	lsls	r3, r6, #2
 80057f4:	58eb      	ldr	r3, [r5, r3]
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	08005e74 	.word	0x08005e74
 8005800:	08005e74 	.word	0x08005e74
 8005804:	08005e74 	.word	0x08005e74
 8005808:	08005e7c 	.word	0x08005e7c

0800580c <memcpy>:
 800580c:	2300      	movs	r3, #0
 800580e:	b510      	push	{r4, lr}
 8005810:	429a      	cmp	r2, r3
 8005812:	d100      	bne.n	8005816 <memcpy+0xa>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	5ccc      	ldrb	r4, [r1, r3]
 8005818:	54c4      	strb	r4, [r0, r3]
 800581a:	3301      	adds	r3, #1
 800581c:	e7f8      	b.n	8005810 <memcpy+0x4>

0800581e <memset>:
 800581e:	0003      	movs	r3, r0
 8005820:	1882      	adds	r2, r0, r2
 8005822:	4293      	cmp	r3, r2
 8005824:	d100      	bne.n	8005828 <memset+0xa>
 8005826:	4770      	bx	lr
 8005828:	7019      	strb	r1, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	e7f9      	b.n	8005822 <memset+0x4>
	...

08005830 <realloc>:
 8005830:	b510      	push	{r4, lr}
 8005832:	4b03      	ldr	r3, [pc, #12]	; (8005840 <realloc+0x10>)
 8005834:	000a      	movs	r2, r1
 8005836:	0001      	movs	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f000 f8e5 	bl	8005a08 <_realloc_r>
 800583e:	bd10      	pop	{r4, pc}
 8005840:	20000010 	.word	0x20000010

08005844 <_raise_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	0004      	movs	r4, r0
 8005848:	000d      	movs	r5, r1
 800584a:	291f      	cmp	r1, #31
 800584c:	d904      	bls.n	8005858 <_raise_r+0x14>
 800584e:	2316      	movs	r3, #22
 8005850:	6003      	str	r3, [r0, #0]
 8005852:	2001      	movs	r0, #1
 8005854:	4240      	negs	r0, r0
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <_raise_r+0x24>
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	189b      	adds	r3, r3, r2
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2a00      	cmp	r2, #0
 8005866:	d108      	bne.n	800587a <_raise_r+0x36>
 8005868:	0020      	movs	r0, r4
 800586a:	f000 f831 	bl	80058d0 <_getpid_r>
 800586e:	002a      	movs	r2, r5
 8005870:	0001      	movs	r1, r0
 8005872:	0020      	movs	r0, r4
 8005874:	f000 f81a 	bl	80058ac <_kill_r>
 8005878:	e7ed      	b.n	8005856 <_raise_r+0x12>
 800587a:	2000      	movs	r0, #0
 800587c:	2a01      	cmp	r2, #1
 800587e:	d0ea      	beq.n	8005856 <_raise_r+0x12>
 8005880:	1c51      	adds	r1, r2, #1
 8005882:	d103      	bne.n	800588c <_raise_r+0x48>
 8005884:	2316      	movs	r3, #22
 8005886:	3001      	adds	r0, #1
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	e7e4      	b.n	8005856 <_raise_r+0x12>
 800588c:	2400      	movs	r4, #0
 800588e:	0028      	movs	r0, r5
 8005890:	601c      	str	r4, [r3, #0]
 8005892:	4790      	blx	r2
 8005894:	0020      	movs	r0, r4
 8005896:	e7de      	b.n	8005856 <_raise_r+0x12>

08005898 <raise>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <raise+0x10>)
 800589c:	0001      	movs	r1, r0
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	f7ff ffd0 	bl	8005844 <_raise_r>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	20000010 	.word	0x20000010

080058ac <_kill_r>:
 80058ac:	2300      	movs	r3, #0
 80058ae:	b570      	push	{r4, r5, r6, lr}
 80058b0:	4d06      	ldr	r5, [pc, #24]	; (80058cc <_kill_r+0x20>)
 80058b2:	0004      	movs	r4, r0
 80058b4:	0008      	movs	r0, r1
 80058b6:	0011      	movs	r1, r2
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f7fd f841 	bl	8002940 <_kill>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d103      	bne.n	80058ca <_kill_r+0x1e>
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d000      	beq.n	80058ca <_kill_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	20000b74 	.word	0x20000b74

080058d0 <_getpid_r>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	f7fd f82f 	bl	8002934 <_getpid>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <sbrk_aligned>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4e0f      	ldr	r6, [pc, #60]	; (8005918 <sbrk_aligned+0x40>)
 80058dc:	000d      	movs	r5, r1
 80058de:	6831      	ldr	r1, [r6, #0]
 80058e0:	0004      	movs	r4, r0
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d102      	bne.n	80058ec <sbrk_aligned+0x14>
 80058e6:	f000 f8bf 	bl	8005a68 <_sbrk_r>
 80058ea:	6030      	str	r0, [r6, #0]
 80058ec:	0029      	movs	r1, r5
 80058ee:	0020      	movs	r0, r4
 80058f0:	f000 f8ba 	bl	8005a68 <_sbrk_r>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d00a      	beq.n	800590e <sbrk_aligned+0x36>
 80058f8:	2303      	movs	r3, #3
 80058fa:	1cc5      	adds	r5, r0, #3
 80058fc:	439d      	bics	r5, r3
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d007      	beq.n	8005912 <sbrk_aligned+0x3a>
 8005902:	1a29      	subs	r1, r5, r0
 8005904:	0020      	movs	r0, r4
 8005906:	f000 f8af 	bl	8005a68 <_sbrk_r>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	d101      	bne.n	8005912 <sbrk_aligned+0x3a>
 800590e:	2501      	movs	r5, #1
 8005910:	426d      	negs	r5, r5
 8005912:	0028      	movs	r0, r5
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	20000b70 	.word	0x20000b70

0800591c <_malloc_r>:
 800591c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800591e:	2203      	movs	r2, #3
 8005920:	1ccb      	adds	r3, r1, #3
 8005922:	4393      	bics	r3, r2
 8005924:	3308      	adds	r3, #8
 8005926:	0006      	movs	r6, r0
 8005928:	001f      	movs	r7, r3
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d232      	bcs.n	8005994 <_malloc_r+0x78>
 800592e:	270c      	movs	r7, #12
 8005930:	42b9      	cmp	r1, r7
 8005932:	d831      	bhi.n	8005998 <_malloc_r+0x7c>
 8005934:	0030      	movs	r0, r6
 8005936:	f000 f8a9 	bl	8005a8c <__malloc_lock>
 800593a:	4d32      	ldr	r5, [pc, #200]	; (8005a04 <_malloc_r+0xe8>)
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	001c      	movs	r4, r3
 8005940:	2c00      	cmp	r4, #0
 8005942:	d12e      	bne.n	80059a2 <_malloc_r+0x86>
 8005944:	0039      	movs	r1, r7
 8005946:	0030      	movs	r0, r6
 8005948:	f7ff ffc6 	bl	80058d8 <sbrk_aligned>
 800594c:	0004      	movs	r4, r0
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d11e      	bne.n	8005990 <_malloc_r+0x74>
 8005952:	682c      	ldr	r4, [r5, #0]
 8005954:	0025      	movs	r5, r4
 8005956:	2d00      	cmp	r5, #0
 8005958:	d14a      	bne.n	80059f0 <_malloc_r+0xd4>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0029      	movs	r1, r5
 800595e:	18e3      	adds	r3, r4, r3
 8005960:	0030      	movs	r0, r6
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f000 f880 	bl	8005a68 <_sbrk_r>
 8005968:	9b01      	ldr	r3, [sp, #4]
 800596a:	4283      	cmp	r3, r0
 800596c:	d143      	bne.n	80059f6 <_malloc_r+0xda>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	3703      	adds	r7, #3
 8005972:	1aff      	subs	r7, r7, r3
 8005974:	2303      	movs	r3, #3
 8005976:	439f      	bics	r7, r3
 8005978:	3708      	adds	r7, #8
 800597a:	2f0c      	cmp	r7, #12
 800597c:	d200      	bcs.n	8005980 <_malloc_r+0x64>
 800597e:	270c      	movs	r7, #12
 8005980:	0039      	movs	r1, r7
 8005982:	0030      	movs	r0, r6
 8005984:	f7ff ffa8 	bl	80058d8 <sbrk_aligned>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d034      	beq.n	80059f6 <_malloc_r+0xda>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	19df      	adds	r7, r3, r7
 8005990:	6027      	str	r7, [r4, #0]
 8005992:	e013      	b.n	80059bc <_malloc_r+0xa0>
 8005994:	2b00      	cmp	r3, #0
 8005996:	dacb      	bge.n	8005930 <_malloc_r+0x14>
 8005998:	230c      	movs	r3, #12
 800599a:	2500      	movs	r5, #0
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	0028      	movs	r0, r5
 80059a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	1bd1      	subs	r1, r2, r7
 80059a6:	d420      	bmi.n	80059ea <_malloc_r+0xce>
 80059a8:	290b      	cmp	r1, #11
 80059aa:	d917      	bls.n	80059dc <_malloc_r+0xc0>
 80059ac:	19e2      	adds	r2, r4, r7
 80059ae:	6027      	str	r7, [r4, #0]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d111      	bne.n	80059d8 <_malloc_r+0xbc>
 80059b4:	602a      	str	r2, [r5, #0]
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	6053      	str	r3, [r2, #4]
 80059bc:	0030      	movs	r0, r6
 80059be:	0025      	movs	r5, r4
 80059c0:	f000 f86c 	bl	8005a9c <__malloc_unlock>
 80059c4:	2207      	movs	r2, #7
 80059c6:	350b      	adds	r5, #11
 80059c8:	1d23      	adds	r3, r4, #4
 80059ca:	4395      	bics	r5, r2
 80059cc:	1aea      	subs	r2, r5, r3
 80059ce:	429d      	cmp	r5, r3
 80059d0:	d0e5      	beq.n	800599e <_malloc_r+0x82>
 80059d2:	1b5b      	subs	r3, r3, r5
 80059d4:	50a3      	str	r3, [r4, r2]
 80059d6:	e7e2      	b.n	800599e <_malloc_r+0x82>
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e7ec      	b.n	80059b6 <_malloc_r+0x9a>
 80059dc:	6862      	ldr	r2, [r4, #4]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	d101      	bne.n	80059e6 <_malloc_r+0xca>
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	e7ea      	b.n	80059bc <_malloc_r+0xa0>
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	e7e8      	b.n	80059bc <_malloc_r+0xa0>
 80059ea:	0023      	movs	r3, r4
 80059ec:	6864      	ldr	r4, [r4, #4]
 80059ee:	e7a7      	b.n	8005940 <_malloc_r+0x24>
 80059f0:	002c      	movs	r4, r5
 80059f2:	686d      	ldr	r5, [r5, #4]
 80059f4:	e7af      	b.n	8005956 <_malloc_r+0x3a>
 80059f6:	230c      	movs	r3, #12
 80059f8:	0030      	movs	r0, r6
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	f000 f84e 	bl	8005a9c <__malloc_unlock>
 8005a00:	e7cd      	b.n	800599e <_malloc_r+0x82>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000b6c 	.word	0x20000b6c

08005a08 <_realloc_r>:
 8005a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a0a:	0007      	movs	r7, r0
 8005a0c:	000e      	movs	r6, r1
 8005a0e:	0014      	movs	r4, r2
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d105      	bne.n	8005a20 <_realloc_r+0x18>
 8005a14:	0011      	movs	r1, r2
 8005a16:	f7ff ff81 	bl	800591c <_malloc_r>
 8005a1a:	0005      	movs	r5, r0
 8005a1c:	0028      	movs	r0, r5
 8005a1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d103      	bne.n	8005a2c <_realloc_r+0x24>
 8005a24:	f000 f842 	bl	8005aac <_free_r>
 8005a28:	0025      	movs	r5, r4
 8005a2a:	e7f7      	b.n	8005a1c <_realloc_r+0x14>
 8005a2c:	f000 f888 	bl	8005b40 <_malloc_usable_size_r>
 8005a30:	9001      	str	r0, [sp, #4]
 8005a32:	4284      	cmp	r4, r0
 8005a34:	d803      	bhi.n	8005a3e <_realloc_r+0x36>
 8005a36:	0035      	movs	r5, r6
 8005a38:	0843      	lsrs	r3, r0, #1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	d3ee      	bcc.n	8005a1c <_realloc_r+0x14>
 8005a3e:	0021      	movs	r1, r4
 8005a40:	0038      	movs	r0, r7
 8005a42:	f7ff ff6b 	bl	800591c <_malloc_r>
 8005a46:	1e05      	subs	r5, r0, #0
 8005a48:	d0e8      	beq.n	8005a1c <_realloc_r+0x14>
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	0022      	movs	r2, r4
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d900      	bls.n	8005a54 <_realloc_r+0x4c>
 8005a52:	001a      	movs	r2, r3
 8005a54:	0031      	movs	r1, r6
 8005a56:	0028      	movs	r0, r5
 8005a58:	f7ff fed8 	bl	800580c <memcpy>
 8005a5c:	0031      	movs	r1, r6
 8005a5e:	0038      	movs	r0, r7
 8005a60:	f000 f824 	bl	8005aac <_free_r>
 8005a64:	e7da      	b.n	8005a1c <_realloc_r+0x14>
	...

08005a68 <_sbrk_r>:
 8005a68:	2300      	movs	r3, #0
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	4d06      	ldr	r5, [pc, #24]	; (8005a88 <_sbrk_r+0x20>)
 8005a6e:	0004      	movs	r4, r0
 8005a70:	0008      	movs	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fc ff80 	bl	8002978 <_sbrk>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d103      	bne.n	8005a84 <_sbrk_r+0x1c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d000      	beq.n	8005a84 <_sbrk_r+0x1c>
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20000b74 	.word	0x20000b74

08005a8c <__malloc_lock>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4802      	ldr	r0, [pc, #8]	; (8005a98 <__malloc_lock+0xc>)
 8005a90:	f000 f85e 	bl	8005b50 <__retarget_lock_acquire_recursive>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000b78 	.word	0x20000b78

08005a9c <__malloc_unlock>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <__malloc_unlock+0xc>)
 8005aa0:	f000 f857 	bl	8005b52 <__retarget_lock_release_recursive>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	20000b78 	.word	0x20000b78

08005aac <_free_r>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	0005      	movs	r5, r0
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d010      	beq.n	8005ad6 <_free_r+0x2a>
 8005ab4:	1f0c      	subs	r4, r1, #4
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da00      	bge.n	8005abe <_free_r+0x12>
 8005abc:	18e4      	adds	r4, r4, r3
 8005abe:	0028      	movs	r0, r5
 8005ac0:	f7ff ffe4 	bl	8005a8c <__malloc_lock>
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <_free_r+0x90>)
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <_free_r+0x2c>
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	6014      	str	r4, [r2, #0]
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	f7ff ffe3 	bl	8005a9c <__malloc_unlock>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d908      	bls.n	8005aee <_free_r+0x42>
 8005adc:	6821      	ldr	r1, [r4, #0]
 8005ade:	1860      	adds	r0, r4, r1
 8005ae0:	4283      	cmp	r3, r0
 8005ae2:	d1f3      	bne.n	8005acc <_free_r+0x20>
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	1841      	adds	r1, r0, r1
 8005aea:	6021      	str	r1, [r4, #0]
 8005aec:	e7ee      	b.n	8005acc <_free_r+0x20>
 8005aee:	001a      	movs	r2, r3
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <_free_r+0x4e>
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	d9f9      	bls.n	8005aee <_free_r+0x42>
 8005afa:	6811      	ldr	r1, [r2, #0]
 8005afc:	1850      	adds	r0, r2, r1
 8005afe:	42a0      	cmp	r0, r4
 8005b00:	d10b      	bne.n	8005b1a <_free_r+0x6e>
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	1809      	adds	r1, r1, r0
 8005b06:	1850      	adds	r0, r2, r1
 8005b08:	6011      	str	r1, [r2, #0]
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	d1e0      	bne.n	8005ad0 <_free_r+0x24>
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	1841      	adds	r1, r0, r1
 8005b14:	6011      	str	r1, [r2, #0]
 8005b16:	6053      	str	r3, [r2, #4]
 8005b18:	e7da      	b.n	8005ad0 <_free_r+0x24>
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x78>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d5      	b.n	8005ad0 <_free_r+0x24>
 8005b24:	6821      	ldr	r1, [r4, #0]
 8005b26:	1860      	adds	r0, r4, r1
 8005b28:	4283      	cmp	r3, r0
 8005b2a:	d103      	bne.n	8005b34 <_free_r+0x88>
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	1841      	adds	r1, r0, r1
 8005b32:	6021      	str	r1, [r4, #0]
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	6054      	str	r4, [r2, #4]
 8005b38:	e7ca      	b.n	8005ad0 <_free_r+0x24>
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	20000b6c 	.word	0x20000b6c

08005b40 <_malloc_usable_size_r>:
 8005b40:	1f0b      	subs	r3, r1, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1f18      	subs	r0, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da01      	bge.n	8005b4e <_malloc_usable_size_r+0xe>
 8005b4a:	580b      	ldr	r3, [r1, r0]
 8005b4c:	18c0      	adds	r0, r0, r3
 8005b4e:	4770      	bx	lr

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
